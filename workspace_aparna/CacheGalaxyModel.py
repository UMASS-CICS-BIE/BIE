# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CacheGalaxyModel', [dirname(__file__)])
        except ImportError:
            import _CacheGalaxyModel
            return _CacheGalaxyModel
        if fp is not None:
            try:
                _mod = imp.load_module('_CacheGalaxyModel', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CacheGalaxyModel = swig_import_helper()
    del swig_import_helper
else:
    import _CacheGalaxyModel
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class CacheGalaxyModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CacheGalaxyModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CacheGalaxyModel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["L"] = _CacheGalaxyModel.CacheGalaxyModel_L_set
    __swig_getmethods__["L"] = _CacheGalaxyModel.CacheGalaxyModel_L_get
    if _newclass:
        L = _swig_property(_CacheGalaxyModel.CacheGalaxyModel_L_get, _CacheGalaxyModel.CacheGalaxyModel_L_set)
    __swig_setmethods__["B"] = _CacheGalaxyModel.CacheGalaxyModel_B_set
    __swig_getmethods__["B"] = _CacheGalaxyModel.CacheGalaxyModel_B_get
    if _newclass:
        B = _swig_property(_CacheGalaxyModel.CacheGalaxyModel_B_get, _CacheGalaxyModel.CacheGalaxyModel_B_set)
    __swig_setmethods__["bins"] = _CacheGalaxyModel.CacheGalaxyModel_bins_set
    __swig_getmethods__["bins"] = _CacheGalaxyModel.CacheGalaxyModel_bins_get
    if _newclass:
        bins = _swig_property(_CacheGalaxyModel.CacheGalaxyModel_bins_get, _CacheGalaxyModel.CacheGalaxyModel_bins_set)
    __swig_setmethods__["R"] = _CacheGalaxyModel.CacheGalaxyModel_R_set
    __swig_getmethods__["R"] = _CacheGalaxyModel.CacheGalaxyModel_R_get
    if _newclass:
        R = _swig_property(_CacheGalaxyModel.CacheGalaxyModel_R_get, _CacheGalaxyModel.CacheGalaxyModel_R_set)
    __swig_setmethods__["z"] = _CacheGalaxyModel.CacheGalaxyModel_z_set
    __swig_getmethods__["z"] = _CacheGalaxyModel.CacheGalaxyModel_z_get
    if _newclass:
        z = _swig_property(_CacheGalaxyModel.CacheGalaxyModel_z_get, _CacheGalaxyModel.CacheGalaxyModel_z_set)
    __swig_setmethods__["fac"] = _CacheGalaxyModel.CacheGalaxyModel_fac_set
    __swig_getmethods__["fac"] = _CacheGalaxyModel.CacheGalaxyModel_fac_get
    if _newclass:
        fac = _swig_property(_CacheGalaxyModel.CacheGalaxyModel_fac_get, _CacheGalaxyModel.CacheGalaxyModel_fac_set)
    __swig_setmethods__["work"] = _CacheGalaxyModel.CacheGalaxyModel_work_set
    __swig_getmethods__["work"] = _CacheGalaxyModel.CacheGalaxyModel_work_get
    if _newclass:
        work = _swig_property(_CacheGalaxyModel.CacheGalaxyModel_work_get, _CacheGalaxyModel.CacheGalaxyModel_work_set)

    def __init__(self, ll, bb):
        this = _CacheGalaxyModel.new_CacheGalaxyModel(ll, bb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def info(self, out, ctr):
        return _CacheGalaxyModel.CacheGalaxyModel_info(self, out, ctr)
    __swig_destroy__ = _CacheGalaxyModel.delete_CacheGalaxyModel
    __del__ = lambda self: None
CacheGalaxyModel_swigregister = _CacheGalaxyModel.CacheGalaxyModel_swigregister
CacheGalaxyModel_swigregister(CacheGalaxyModel)

class CacheGalaxyModelGrid(CacheGalaxyModel):
    __swig_setmethods__ = {}
    for _s in [CacheGalaxyModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CacheGalaxyModelGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [CacheGalaxyModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CacheGalaxyModelGrid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["grid"] = _CacheGalaxyModel.CacheGalaxyModelGrid_grid_set
    __swig_getmethods__["grid"] = _CacheGalaxyModel.CacheGalaxyModelGrid_grid_get
    if _newclass:
        grid = _swig_property(_CacheGalaxyModel.CacheGalaxyModelGrid_grid_get, _CacheGalaxyModel.CacheGalaxyModelGrid_grid_set)

    def __init__(self, ll, bb):
        this = _CacheGalaxyModel.new_CacheGalaxyModelGrid(ll, bb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def info(self, out, ctr):
        return _CacheGalaxyModel.CacheGalaxyModelGrid_info(self, out, ctr)
    __swig_destroy__ = _CacheGalaxyModel.delete_CacheGalaxyModelGrid
    __del__ = lambda self: None
CacheGalaxyModelGrid_swigregister = _CacheGalaxyModel.CacheGalaxyModelGrid_swigregister
CacheGalaxyModelGrid_swigregister(CacheGalaxyModelGrid)


def CacheGalaxyModelDump(*args):
    return _CacheGalaxyModel.CacheGalaxyModelDump(*args)
CacheGalaxyModelDump = _CacheGalaxyModel.CacheGalaxyModelDump
# This file is compatible with both classic and new-style classes.


