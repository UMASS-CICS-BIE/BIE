# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BIEException', [dirname(__file__)])
        except ImportError:
            import _BIEException
            return _BIEException
        if fp is not None:
            try:
                _mod = imp.load_module('_BIEException', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BIEException = swig_import_helper()
    del swig_import_helper
else:
    import _BIEException
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class BIEException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BIEException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BIEException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_BIEException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_BIEException
    __del__ = lambda self: None

    def getErrorMessage(self):
        return _BIEException.BIEException_getErrorMessage(self)
BIEException_swigregister = _BIEException.BIEException_swigregister
BIEException_swigregister(BIEException)

class InternalError(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternalError, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InternalError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_InternalError(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_InternalError
    __del__ = lambda self: None
InternalError_swigregister = _BIEException.InternalError_swigregister
InternalError_swigregister(InternalError)

class TypeException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_TypeException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_TypeException
    __del__ = lambda self: None
TypeException_swigregister = _BIEException.TypeException_swigregister
TypeException_swigregister(TypeException)

class NoValueException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoValueException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoValueException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NoValueException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NoValueException
    __del__ = lambda self: None
NoValueException_swigregister = _BIEException.NoValueException_swigregister
NoValueException_swigregister(NoValueException)

class NoSuchFieldException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchFieldException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchFieldException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_NoSuchFieldException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NoSuchFieldException
    __del__ = lambda self: None
NoSuchFieldException_swigregister = _BIEException.NoSuchFieldException_swigregister
NoSuchFieldException_swigregister(NoSuchFieldException)

class NotSetInputException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotSetInputException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotSetInputException, name)
    __repr__ = _swig_repr

    def __init__(self, inputindex, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NotSetInputException(inputindex, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NotSetInputException
    __del__ = lambda self: None
NotSetInputException_swigregister = _BIEException.NotSetInputException_swigregister
NotSetInputException_swigregister(NotSetInputException)

class NotScalarInputException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotScalarInputException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotScalarInputException, name)
    __repr__ = _swig_repr

    def __init__(self, inputindex, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NotScalarInputException(inputindex, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NotScalarInputException
    __del__ = lambda self: None
NotScalarInputException_swigregister = _BIEException.NotScalarInputException_swigregister
NotScalarInputException_swigregister(NotScalarInputException)

class NoSuchFilterInputException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchFilterInputException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchFilterInputException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_NoSuchFilterInputException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NoSuchFilterInputException
    __del__ = lambda self: None
NoSuchFilterInputException_swigregister = _BIEException.NoSuchFilterInputException_swigregister
NoSuchFilterInputException_swigregister(NoSuchFilterInputException)

class NoSuchFilterOutputException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchFilterOutputException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchFilterOutputException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_NoSuchFilterOutputException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NoSuchFilterOutputException
    __del__ = lambda self: None
NoSuchFilterOutputException_swigregister = _BIEException.NoSuchFilterOutputException_swigregister
NoSuchFilterOutputException_swigregister(NoSuchFilterOutputException)

class BadRangeException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BadRangeException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BadRangeException, name)
    __repr__ = _swig_repr

    def __init__(self, startindex, endindex, sourcefilename, sourcelinenumber):
        this = _BIEException.new_BadRangeException(startindex, endindex, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_BadRangeException
    __del__ = lambda self: None
BadRangeException_swigregister = _BIEException.BadRangeException_swigregister
BadRangeException_swigregister(BadRangeException)

class NameClashException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameClashException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NameClashException, name)
    __repr__ = _swig_repr

    def __init__(self, clashname, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NameClashException(clashname, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NameClashException
    __del__ = lambda self: None
NameClashException_swigregister = _BIEException.NameClashException_swigregister
NameClashException_swigregister(NameClashException)

class DuplicateFieldException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuplicateFieldException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuplicateFieldException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_DuplicateFieldException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_DuplicateFieldException
    __del__ = lambda self: None
DuplicateFieldException_swigregister = _BIEException.DuplicateFieldException_swigregister
DuplicateFieldException_swigregister(DuplicateFieldException)

class StreamInheritanceException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamInheritanceException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamInheritanceException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_StreamInheritanceException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_StreamInheritanceException
    __del__ = lambda self: None
StreamInheritanceException_swigregister = _BIEException.StreamInheritanceException_swigregister
StreamInheritanceException_swigregister(StreamInheritanceException)

class FileOpenException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileOpenException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileOpenException, name)
    __repr__ = _swig_repr

    def __init__(self, filename, errno_, sourcefilename, sourcelinenumber):
        this = _BIEException.new_FileOpenException(filename, errno_, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_FileOpenException
    __del__ = lambda self: None
FileOpenException_swigregister = _BIEException.FileOpenException_swigregister
FileOpenException_swigregister(FileOpenException)

class FileCreateException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileCreateException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileCreateException, name)
    __repr__ = _swig_repr

    def __init__(self, filename, errno_, sourcefilename, sourcelinenumber):
        this = _BIEException.new_FileCreateException(filename, errno_, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_FileCreateException
    __del__ = lambda self: None
FileCreateException_swigregister = _BIEException.FileCreateException_swigregister
FileCreateException_swigregister(FileCreateException)

class FileFormatException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileFormatException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileFormatException, name)
    __repr__ = _swig_repr

    def __init__(self, message, sourcefilename, sourcelinenumber):
        this = _BIEException.new_FileFormatException(message, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_FileFormatException
    __del__ = lambda self: None
FileFormatException_swigregister = _BIEException.FileFormatException_swigregister
FileFormatException_swigregister(FileFormatException)

class EndofStreamException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndofStreamException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndofStreamException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_EndofStreamException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_EndofStreamException
    __del__ = lambda self: None
EndofStreamException_swigregister = _BIEException.EndofStreamException_swigregister
EndofStreamException_swigregister(EndofStreamException)

class NotRootException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotRootException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotRootException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NotRootException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NotRootException
    __del__ = lambda self: None
NotRootException_swigregister = _BIEException.NotRootException_swigregister
NotRootException_swigregister(NotRootException)

class NoSuchConnection(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchConnection, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NoSuchConnection(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NoSuchConnection
    __del__ = lambda self: None
NoSuchConnection_swigregister = _BIEException.NoSuchConnection_swigregister
NoSuchConnection_swigregister(NoSuchConnection)

class UnusableFilterException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnusableFilterException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnusableFilterException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_UnusableFilterException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_UnusableFilterException
    __del__ = lambda self: None
UnusableFilterException_swigregister = _BIEException.UnusableFilterException_swigregister
UnusableFilterException_swigregister(UnusableFilterException)

class AttachedFilterException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttachedFilterException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AttachedFilterException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_AttachedFilterException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_AttachedFilterException
    __del__ = lambda self: None
AttachedFilterException_swigregister = _BIEException.AttachedFilterException_swigregister
AttachedFilterException_swigregister(AttachedFilterException)

class InsertPositionException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertPositionException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InsertPositionException, name)
    __repr__ = _swig_repr

    def __init__(self, insertpos, sourcefilename, sourcelinenumber):
        this = _BIEException.new_InsertPositionException(insertpos, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_InsertPositionException
    __del__ = lambda self: None
InsertPositionException_swigregister = _BIEException.InsertPositionException_swigregister
InsertPositionException_swigregister(InsertPositionException)

class InvalidStreamIDException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidStreamIDException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidStreamIDException, name)
    __repr__ = _swig_repr

    def __init__(self, streamid, sourcefilename, sourcelinenumber):
        this = _BIEException.new_InvalidStreamIDException(streamid, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_InvalidStreamIDException
    __del__ = lambda self: None
InvalidStreamIDException_swigregister = _BIEException.InvalidStreamIDException_swigregister
InvalidStreamIDException_swigregister(InvalidStreamIDException)

class CliException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CliException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CliException, name)
    __repr__ = _swig_repr

    def __init__(self, message, sourcefilename, sourcelinenumber):
        this = _BIEException.new_CliException(message, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_CliException
    __del__ = lambda self: None
CliException_swigregister = _BIEException.CliException_swigregister
CliException_swigregister(CliException)

class ClassNotExistException(CliException):
    __swig_setmethods__ = {}
    for _s in [CliException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassNotExistException, name, value)
    __swig_getmethods__ = {}
    for _s in [CliException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClassNotExistException, name)
    __repr__ = _swig_repr

    def __init__(self, class_name, sourcefilename, sourcelinenumber):
        this = _BIEException.new_ClassNotExistException(class_name, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_ClassNotExistException
    __del__ = lambda self: None
ClassNotExistException_swigregister = _BIEException.ClassNotExistException_swigregister
ClassNotExistException_swigregister(ClassNotExistException)

class MethodCallOnNonObjectException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodCallOnNonObjectException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MethodCallOnNonObjectException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_MethodCallOnNonObjectException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_MethodCallOnNonObjectException
    __del__ = lambda self: None
MethodCallOnNonObjectException_swigregister = _BIEException.MethodCallOnNonObjectException_swigregister
MethodCallOnNonObjectException_swigregister(MethodCallOnNonObjectException)

class MethodNotExistException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodNotExistException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MethodNotExistException, name)
    __repr__ = _swig_repr

    def __init__(self, method_name, sourcefilename, sourcelinenumber):
        this = _BIEException.new_MethodNotExistException(method_name, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_MethodNotExistException
    __del__ = lambda self: None
MethodNotExistException_swigregister = _BIEException.MethodNotExistException_swigregister
MethodNotExistException_swigregister(MethodNotExistException)

class MethodDiffArgException(CliException):
    __swig_setmethods__ = {}
    for _s in [CliException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodDiffArgException, name, value)
    __swig_getmethods__ = {}
    for _s in [CliException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MethodDiffArgException, name)
    __repr__ = _swig_repr

    def __init__(self, method_name, sourcefilename, sourcelinenumber):
        this = _BIEException.new_MethodDiffArgException(method_name, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_MethodDiffArgException
    __del__ = lambda self: None
MethodDiffArgException_swigregister = _BIEException.MethodDiffArgException_swigregister
MethodDiffArgException_swigregister(MethodDiffArgException)

class MethodDiffRetTypeException(CliException):
    __swig_setmethods__ = {}
    for _s in [CliException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodDiffRetTypeException, name, value)
    __swig_getmethods__ = {}
    for _s in [CliException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MethodDiffRetTypeException, name)
    __repr__ = _swig_repr

    def __init__(self, method_name, sourcefilename, sourcelinenumber):
        this = _BIEException.new_MethodDiffRetTypeException(method_name, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_MethodDiffRetTypeException
    __del__ = lambda self: None
MethodDiffRetTypeException_swigregister = _BIEException.MethodDiffRetTypeException_swigregister
MethodDiffRetTypeException_swigregister(MethodDiffRetTypeException)

class VarNotExistException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarNotExistException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarNotExistException, name)
    __repr__ = _swig_repr

    def __init__(self, var, sourcefilename, sourcelinenumber):
        this = _BIEException.new_VarNotExistException(var, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_VarNotExistException
    __del__ = lambda self: None
VarNotExistException_swigregister = _BIEException.VarNotExistException_swigregister
VarNotExistException_swigregister(VarNotExistException)

class TypeMisMatchException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeMisMatchException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeMisMatchException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_TypeMisMatchException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_TypeMisMatchException
    __del__ = lambda self: None
TypeMisMatchException_swigregister = _BIEException.TypeMisMatchException_swigregister
TypeMisMatchException_swigregister(TypeMisMatchException)

class EvalExprException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EvalExprException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EvalExprException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_EvalExprException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_EvalExprException
    __del__ = lambda self: None
EvalExprException_swigregister = _BIEException.EvalExprException_swigregister
EvalExprException_swigregister(EvalExprException)

class PriorException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriorException, name)
    __repr__ = _swig_repr

    def __init__(self, error_msg, sourcefilename, sourcelinenumber):
        this = _BIEException.new_PriorException(error_msg, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_PriorException
    __del__ = lambda self: None
PriorException_swigregister = _BIEException.PriorException_swigregister
PriorException_swigregister(PriorException)

class FileNotExistException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileNotExistException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileNotExistException, name)
    __repr__ = _swig_repr

    def __init__(self, error_msg, filename, sourcefilename, sourcelinenumber):
        this = _BIEException.new_FileNotExistException(error_msg, filename, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_FileNotExistException
    __del__ = lambda self: None
FileNotExistException_swigregister = _BIEException.FileNotExistException_swigregister
FileNotExistException_swigregister(FileNotExistException)

class DimNotSupportException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimNotSupportException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DimNotSupportException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_DimNotSupportException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_DimNotSupportException
    __del__ = lambda self: None
DimNotSupportException_swigregister = _BIEException.DimNotSupportException_swigregister
DimNotSupportException_swigregister(DimNotSupportException)

class TypeNotSupportException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeNotSupportException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeNotSupportException, name)
    __repr__ = _swig_repr

    def __init__(self, type, sourcefilename, sourcelinenumber):
        this = _BIEException.new_TypeNotSupportException(type, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_TypeNotSupportException
    __del__ = lambda self: None
TypeNotSupportException_swigregister = _BIEException.TypeNotSupportException_swigregister
TypeNotSupportException_swigregister(TypeNotSupportException)

class DimNotMatchException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimNotMatchException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DimNotMatchException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_DimNotMatchException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_DimNotMatchException
    __del__ = lambda self: None
DimNotMatchException_swigregister = _BIEException.DimNotMatchException_swigregister
DimNotMatchException_swigregister(DimNotMatchException)

class DirichletValueException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirichletValueException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirichletValueException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_DirichletValueException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_DirichletValueException
    __del__ = lambda self: None
DirichletValueException_swigregister = _BIEException.DirichletValueException_swigregister
DirichletValueException_swigregister(DirichletValueException)

class DirichletSumException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirichletSumException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirichletSumException, name)
    __repr__ = _swig_repr

    def __init__(self, val, sourcefilename, sourcelinenumber):
        this = _BIEException.new_DirichletSumException(val, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_DirichletSumException
    __del__ = lambda self: None
DirichletSumException_swigregister = _BIEException.DirichletSumException_swigregister
DirichletSumException_swigregister(DirichletSumException)

class DirichletMomException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirichletMomException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirichletMomException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_DirichletMomException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_DirichletMomException
    __del__ = lambda self: None
DirichletMomException_swigregister = _BIEException.DirichletMomException_swigregister
DirichletMomException_swigregister(DirichletMomException)

class PriorTypeException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorTypeException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriorTypeException, name)
    __repr__ = _swig_repr

    def __init__(self, type, sourcefilename, sourcelinenumber):
        this = _BIEException.new_PriorTypeException(type, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_PriorTypeException
    __del__ = lambda self: None
PriorTypeException_swigregister = _BIEException.PriorTypeException_swigregister
PriorTypeException_swigregister(PriorTypeException)

class DimValueException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimValueException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DimValueException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_DimValueException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_DimValueException
    __del__ = lambda self: None
DimValueException_swigregister = _BIEException.DimValueException_swigregister
DimValueException_swigregister(DimValueException)

class TessellationOverlapException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TessellationOverlapException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TessellationOverlapException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_TessellationOverlapException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_TessellationOverlapException
    __del__ = lambda self: None
TessellationOverlapException_swigregister = _BIEException.TessellationOverlapException_swigregister
TessellationOverlapException_swigregister(TessellationOverlapException)

class KSDistanceException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KSDistanceException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KSDistanceException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_KSDistanceException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_KSDistanceException
    __del__ = lambda self: None
KSDistanceException_swigregister = _BIEException.KSDistanceException_swigregister
KSDistanceException_swigregister(KSDistanceException)

class DataSetFieldException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSetFieldException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataSetFieldException, name)
    __repr__ = _swig_repr

    def __init__(self, field, msg, sourcefilename, sourcelinenumber):
        this = _BIEException.new_DataSetFieldException(field, msg, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_DataSetFieldException
    __del__ = lambda self: None
DataSetFieldException_swigregister = _BIEException.DataSetFieldException_swigregister
DataSetFieldException_swigregister(DataSetFieldException)

class StringBufferOverflowException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringBufferOverflowException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringBufferOverflowException, name)
    __repr__ = _swig_repr

    def __init__(self, bufferlen, requiredlen, sourcefilename, sourcelinenumber):
        this = _BIEException.new_StringBufferOverflowException(bufferlen, requiredlen, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_StringBufferOverflowException
    __del__ = lambda self: None
StringBufferOverflowException_swigregister = _BIEException.StringBufferOverflowException_swigregister
StringBufferOverflowException_swigregister(StringBufferOverflowException)

class NetCDFException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetCDFException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetCDFException, name)
    __repr__ = _swig_repr

    def __init__(self, ncstatus, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NetCDFException(ncstatus, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NetCDFException
    __del__ = lambda self: None
NetCDFException_swigregister = _BIEException.NetCDFException_swigregister
NetCDFException_swigregister(NetCDFException)

class NetCDFFormatException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetCDFFormatException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetCDFFormatException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_NetCDFFormatException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NetCDFFormatException
    __del__ = lambda self: None
NetCDFFormatException_swigregister = _BIEException.NetCDFFormatException_swigregister
NetCDFFormatException_swigregister(NetCDFFormatException)

class GetTypeException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetTypeException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetTypeException, name)
    __repr__ = _swig_repr

    def __init__(self, status, sourcefilename, sourcelinenumber):
        this = _BIEException.new_GetTypeException(status, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_GetTypeException
    __del__ = lambda self: None
GetTypeException_swigregister = _BIEException.GetTypeException_swigregister
GetTypeException_swigregister(GetTypeException)

class TileIDException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TileIDException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TileIDException, name)
    __repr__ = _swig_repr

    def __init__(self, tileid, mintileid, maxtileid, sourcefilename, sourcelinenumber):
        this = _BIEException.new_TileIDException(tileid, mintileid, maxtileid, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_TileIDException
    __del__ = lambda self: None
TileIDException_swigregister = _BIEException.TileIDException_swigregister
TileIDException_swigregister(TileIDException)

class InvalidFrontierException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFrontierException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFrontierException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_InvalidFrontierException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_InvalidFrontierException
    __del__ = lambda self: None
InvalidFrontierException_swigregister = _BIEException.InvalidFrontierException_swigregister
InvalidFrontierException_swigregister(InvalidFrontierException)

class NoSuchDistributionException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchDistributionException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchDistributionException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NoSuchDistributionException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NoSuchDistributionException
    __del__ = lambda self: None
NoSuchDistributionException_swigregister = _BIEException.NoSuchDistributionException_swigregister
NoSuchDistributionException_swigregister(NoSuchDistributionException)

class NoPointDistributionException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPointDistributionException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoPointDistributionException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NoPointDistributionException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NoPointDistributionException
    __del__ = lambda self: None
NoPointDistributionException_swigregister = _BIEException.NoPointDistributionException_swigregister
NoPointDistributionException_swigregister(NoPointDistributionException)

class NoBinnedDistributionException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoBinnedDistributionException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoBinnedDistributionException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NoBinnedDistributionException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NoBinnedDistributionException
    __del__ = lambda self: None
NoBinnedDistributionException_swigregister = _BIEException.NoBinnedDistributionException_swigregister
NoBinnedDistributionException_swigregister(NoBinnedDistributionException)

class InappropriateDistributionException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InappropriateDistributionException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InappropriateDistributionException, name)
    __repr__ = _swig_repr

    def __init__(self, stype, sourcefilename, sourcelinenumber):
        this = _BIEException.new_InappropriateDistributionException(stype, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_InappropriateDistributionException
    __del__ = lambda self: None
InappropriateDistributionException_swigregister = _BIEException.InappropriateDistributionException_swigregister
InappropriateDistributionException_swigregister(InappropriateDistributionException)

class TessToolException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TessToolException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TessToolException, name)
    __repr__ = _swig_repr

    def __init__(self, msg, sourcefilename, sourcelinenumber):
        this = _BIEException.new_TessToolException(msg, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_TessToolException
    __del__ = lambda self: None
TessToolException_swigregister = _BIEException.TessToolException_swigregister
TessToolException_swigregister(TessToolException)

class ImpossibleStateException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpossibleStateException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpossibleStateException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_ImpossibleStateException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_ImpossibleStateException
    __del__ = lambda self: None
ImpossibleStateException_swigregister = _BIEException.ImpossibleStateException_swigregister
ImpossibleStateException_swigregister(ImpossibleStateException)

class MetropolisHastingsException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetropolisHastingsException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetropolisHastingsException, name)
    __repr__ = _swig_repr

    def __init__(self, file, sourcefilename, sourcelinenumber):
        this = _BIEException.new_MetropolisHastingsException(file, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_MetropolisHastingsException
    __del__ = lambda self: None
MetropolisHastingsException_swigregister = _BIEException.MetropolisHastingsException_swigregister
MetropolisHastingsException_swigregister(MetropolisHastingsException)

class EmptyStateException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyStateException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyStateException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_EmptyStateException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_EmptyStateException
    __del__ = lambda self: None
EmptyStateException_swigregister = _BIEException.EmptyStateException_swigregister
EmptyStateException_swigregister(EmptyStateException)

class StateCreateException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateCreateException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateCreateException, name)
    __repr__ = _swig_repr

    def __init__(self, idim, sourcefilename, sourcelinenumber):
        this = _BIEException.new_StateCreateException(idim, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_StateCreateException
    __del__ = lambda self: None
StateCreateException_swigregister = _BIEException.StateCreateException_swigregister
StateCreateException_swigregister(StateCreateException)

class StateBoundsException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateBoundsException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateBoundsException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BIEException.new_StateBoundsException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_StateBoundsException
    __del__ = lambda self: None
StateBoundsException_swigregister = _BIEException.StateBoundsException_swigregister
StateBoundsException_swigregister(StateBoundsException)

class ResumeLogException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResumeLogException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResumeLogException, name)
    __repr__ = _swig_repr

    def __init__(self, message, sourcefilename, sourcelinenumber):
        this = _BIEException.new_ResumeLogException(message, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_ResumeLogException
    __del__ = lambda self: None
ResumeLogException_swigregister = _BIEException.ResumeLogException_swigregister
ResumeLogException_swigregister(ResumeLogException)

class BadParameterException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BadParameterException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BadParameterException, name)
    __repr__ = _swig_repr

    def __init__(self, classname, message, sourcefilename, sourcelinenumber):
        this = _BIEException.new_BadParameterException(classname, message, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_BadParameterException
    __del__ = lambda self: None
BadParameterException_swigregister = _BIEException.BadParameterException_swigregister
BadParameterException_swigregister(BadParameterException)

class StateBlockingException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateBlockingException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateBlockingException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_StateBlockingException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_StateBlockingException
    __del__ = lambda self: None
StateBlockingException_swigregister = _BIEException.StateBlockingException_swigregister
StateBlockingException_swigregister(StateBlockingException)

class NonExistentBlock(StateBlockingException):
    __swig_setmethods__ = {}
    for _s in [StateBlockingException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonExistentBlock, name, value)
    __swig_getmethods__ = {}
    for _s in [StateBlockingException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonExistentBlock, name)
    __repr__ = _swig_repr

    def __init__(self, j, s, sourcefilename, sourcelinenumber):
        this = _BIEException.new_NonExistentBlock(j, s, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_NonExistentBlock
    __del__ = lambda self: None
NonExistentBlock_swigregister = _BIEException.NonExistentBlock_swigregister
NonExistentBlock_swigregister(NonExistentBlock)

class GalphatException(BIEException):
    __swig_setmethods__ = {}
    for _s in [BIEException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalphatException, name, value)
    __swig_getmethods__ = {}
    for _s in [BIEException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GalphatException, name)
    __repr__ = _swig_repr

    def __init__(self, sourcefilename, sourcelinenumber):
        this = _BIEException.new_GalphatException(sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_GalphatException
    __del__ = lambda self: None
GalphatException_swigregister = _BIEException.GalphatException_swigregister
GalphatException_swigregister(GalphatException)

class GalphatBadCode(GalphatException):
    __swig_setmethods__ = {}
    for _s in [GalphatException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalphatBadCode, name, value)
    __swig_getmethods__ = {}
    for _s in [GalphatException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GalphatBadCode, name)
    __repr__ = _swig_repr

    def __init__(self, classname, method, message, sourcefilename, sourcelinenumber):
        this = _BIEException.new_GalphatBadCode(classname, method, message, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_GalphatBadCode
    __del__ = lambda self: None
GalphatBadCode_swigregister = _BIEException.GalphatBadCode_swigregister
GalphatBadCode_swigregister(GalphatBadCode)

class GalphatBadConfig(GalphatException):
    __swig_setmethods__ = {}
    for _s in [GalphatException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalphatBadConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [GalphatException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GalphatBadConfig, name)
    __repr__ = _swig_repr

    def __init__(self, configfile, classname, method, message, sourcefilename, sourcelinenumber):
        this = _BIEException.new_GalphatBadConfig(configfile, classname, method, message, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_GalphatBadConfig
    __del__ = lambda self: None
GalphatBadConfig_swigregister = _BIEException.GalphatBadConfig_swigregister
GalphatBadConfig_swigregister(GalphatBadConfig)

class GalphatBadParameter(GalphatException):
    __swig_setmethods__ = {}
    for _s in [GalphatException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalphatBadParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [GalphatException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GalphatBadParameter, name)
    __repr__ = _swig_repr

    def __init__(self, classname, method, message, sourcefilename, sourcelinenumber):
        this = _BIEException.new_GalphatBadParameter(classname, method, message, sourcefilename, sourcelinenumber)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BIEException.delete_GalphatBadParameter
    __del__ = lambda self: None
GalphatBadParameter_swigregister = _BIEException.GalphatBadParameter_swigregister
GalphatBadParameter_swigregister(GalphatBadParameter)

# This file is compatible with both classic and new-style classes.


