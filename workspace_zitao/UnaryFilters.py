# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_UnaryFilters')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UnaryFilters')
    _UnaryFilters = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UnaryFilters', [dirname(__file__)])
        except ImportError:
            import _UnaryFilters
            return _UnaryFilters
        if fp is not None:
            try:
                _mod = imp.load_module('_UnaryFilters', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _UnaryFilters = swig_import_helper()
    del swig_import_helper
else:
    import _UnaryFilters
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class AbsFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbsFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbsFilter, name)
    __repr__ = _swig_repr

    def __init__(self, stream):
        this = _UnaryFilters.new_AbsFilter(stream)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self):
        return _UnaryFilters.AbsFilter_compute(self)
    __swig_destroy__ = _UnaryFilters.delete_AbsFilter
    __del__ = lambda self: None
AbsFilter_swigregister = _UnaryFilters.AbsFilter_swigregister
AbsFilter_swigregister(AbsFilter)

class LogFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogFilter, name)
    __repr__ = _swig_repr

    def __init__(self, stream):
        this = _UnaryFilters.new_LogFilter(stream)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self):
        return _UnaryFilters.LogFilter_compute(self)
    __swig_destroy__ = _UnaryFilters.delete_LogFilter
    __del__ = lambda self: None
LogFilter_swigregister = _UnaryFilters.LogFilter_swigregister
LogFilter_swigregister(LogFilter)

class LogBaseNFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogBaseNFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogBaseNFilter, name)
    __repr__ = _swig_repr

    def __init__(self, stream, base):
        this = _UnaryFilters.new_LogBaseNFilter(stream, base)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self):
        return _UnaryFilters.LogBaseNFilter_compute(self)
    __swig_destroy__ = _UnaryFilters.delete_LogBaseNFilter
    __del__ = lambda self: None
LogBaseNFilter_swigregister = _UnaryFilters.LogBaseNFilter_swigregister
LogBaseNFilter_swigregister(LogBaseNFilter)

class ScaleFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleFilter, name)
    __repr__ = _swig_repr

    def __init__(self, stream, scalefactor):
        this = _UnaryFilters.new_ScaleFilter(stream, scalefactor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self):
        return _UnaryFilters.ScaleFilter_compute(self)
    __swig_destroy__ = _UnaryFilters.delete_ScaleFilter
    __del__ = lambda self: None
ScaleFilter_swigregister = _UnaryFilters.ScaleFilter_swigregister
ScaleFilter_swigregister(ScaleFilter)

class CosineFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosineFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CosineFilter, name)
    __repr__ = _swig_repr

    def __init__(self, stream):
        this = _UnaryFilters.new_CosineFilter(stream)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self):
        return _UnaryFilters.CosineFilter_compute(self)
    __swig_destroy__ = _UnaryFilters.delete_CosineFilter
    __del__ = lambda self: None
CosineFilter_swigregister = _UnaryFilters.CosineFilter_swigregister
CosineFilter_swigregister(CosineFilter)

class SineFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SineFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SineFilter, name)
    __repr__ = _swig_repr

    def __init__(self, stream):
        this = _UnaryFilters.new_SineFilter(stream)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self):
        return _UnaryFilters.SineFilter_compute(self)
    __swig_destroy__ = _UnaryFilters.delete_SineFilter
    __del__ = lambda self: None
SineFilter_swigregister = _UnaryFilters.SineFilter_swigregister
SineFilter_swigregister(SineFilter)

class MuFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MuFilter, name)
    __repr__ = _swig_repr

    def __init__(self, stream, MU):
        this = _UnaryFilters.new_MuFilter(stream, MU)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self):
        return _UnaryFilters.MuFilter_compute(self)
    __swig_destroy__ = _UnaryFilters.delete_MuFilter
    __del__ = lambda self: None
MuFilter_swigregister = _UnaryFilters.MuFilter_swigregister
MuFilter_swigregister(MuFilter)

class InverseMuFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseMuFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InverseMuFilter, name)
    __repr__ = _swig_repr

    def __init__(self, stream, MU):
        this = _UnaryFilters.new_InverseMuFilter(stream, MU)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self):
        return _UnaryFilters.InverseMuFilter_compute(self)
    __swig_destroy__ = _UnaryFilters.delete_InverseMuFilter
    __del__ = lambda self: None
InverseMuFilter_swigregister = _UnaryFilters.InverseMuFilter_swigregister
InverseMuFilter_swigregister(InverseMuFilter)

# This file is compatible with both classic and new-style classes.


