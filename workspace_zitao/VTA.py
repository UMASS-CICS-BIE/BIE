# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VTA')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VTA')
    _VTA = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VTA', [dirname(__file__)])
        except ImportError:
            import _VTA
            return _VTA
        if fp is not None:
            try:
                _mod = imp.load_module('_VTA', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VTA = swig_import_helper()
    del swig_import_helper
else:
    import _VTA
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class VTA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VTA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VTA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lowerBound"] = _VTA.VTA_lowerBound_set
    __swig_getmethods__["lowerBound"] = _VTA.VTA_lowerBound_get
    if _newclass:
        lowerBound = _swig_property(_VTA.VTA_lowerBound_get, _VTA.VTA_lowerBound_set)
    __swig_setmethods__["upperBound"] = _VTA.VTA_upperBound_set
    __swig_getmethods__["upperBound"] = _VTA.VTA_upperBound_get
    if _newclass:
        upperBound = _swig_property(_VTA.VTA_upperBound_get, _VTA.VTA_upperBound_set)
    __swig_setmethods__["useMPI"] = _VTA.VTA_useMPI_set
    __swig_getmethods__["useMPI"] = _VTA.VTA_useMPI_get
    if _newclass:
        useMPI = _swig_property(_VTA.VTA_useMPI_get, _VTA.VTA_useMPI_set)
    __swig_setmethods__["treMPI"] = _VTA.VTA_treMPI_set
    __swig_getmethods__["treMPI"] = _VTA.VTA_treMPI_get
    if _newclass:
        treMPI = _swig_property(_VTA.VTA_treMPI_get, _VTA.VTA_treMPI_set)
    __swig_setmethods__["useNNT"] = _VTA.VTA_useNNT_set
    __swig_getmethods__["useNNT"] = _VTA.VTA_useNNT_get
    if _newclass:
        useNNT = _swig_property(_VTA.VTA_useNNT_get, _VTA.VTA_useNNT_set)
    __swig_setmethods__["useORB"] = _VTA.VTA_useORB_set
    __swig_getmethods__["useORB"] = _VTA.VTA_useORB_get
    if _newclass:
        useORB = _swig_property(_VTA.VTA_useORB_get, _VTA.VTA_useORB_set)
    __swig_setmethods__["useTNT"] = _VTA.VTA_useTNT_set
    __swig_getmethods__["useTNT"] = _VTA.VTA_useTNT_get
    if _newclass:
        useTNT = _swig_property(_VTA.VTA_useTNT_get, _VTA.VTA_useTNT_set)
    __swig_setmethods__["deltaP"] = _VTA.VTA_deltaP_set
    __swig_getmethods__["deltaP"] = _VTA.VTA_deltaP_get
    if _newclass:
        deltaP = _swig_property(_VTA.VTA_deltaP_get, _VTA.VTA_deltaP_set)
    __swig_setmethods__["dPmin"] = _VTA.VTA_dPmin_set
    __swig_getmethods__["dPmin"] = _VTA.VTA_dPmin_get
    if _newclass:
        dPmin = _swig_property(_VTA.VTA_dPmin_get, _VTA.VTA_dPmin_set)
    __swig_setmethods__["TNTlev"] = _VTA.VTA_TNTlev_set
    __swig_getmethods__["TNTlev"] = _VTA.VTA_TNTlev_get
    if _newclass:
        TNTlev = _swig_property(_VTA.VTA_TNTlev_get, _VTA.VTA_TNTlev_set)
    __swig_setmethods__["nY"] = _VTA.VTA_nY_set
    __swig_getmethods__["nY"] = _VTA.VTA_nY_get
    if _newclass:
        nY = _swig_property(_VTA.VTA_nY_get, _VTA.VTA_nY_set)
    __swig_setmethods__["Xvolume"] = _VTA.VTA_Xvolume_set
    __swig_getmethods__["Xvolume"] = _VTA.VTA_Xvolume_get
    if _newclass:
        Xvolume = _swig_property(_VTA.VTA_Xvolume_get, _VTA.VTA_Xvolume_set)
    __swig_setmethods__["Yvolume"] = _VTA.VTA_Yvolume_set
    __swig_getmethods__["Yvolume"] = _VTA.VTA_Yvolume_get
    if _newclass:
        Yvolume = _swig_property(_VTA.VTA_Yvolume_get, _VTA.VTA_Yvolume_set)
    __swig_setmethods__["Llower"] = _VTA.VTA_Llower_set
    __swig_getmethods__["Llower"] = _VTA.VTA_Llower_get
    if _newclass:
        Llower = _swig_property(_VTA.VTA_Llower_get, _VTA.VTA_Llower_set)
    __swig_setmethods__["Lmean"] = _VTA.VTA_Lmean_set
    __swig_getmethods__["Lmean"] = _VTA.VTA_Lmean_get
    if _newclass:
        Lmean = _swig_property(_VTA.VTA_Lmean_get, _VTA.VTA_Lmean_set)
    __swig_setmethods__["Lupper"] = _VTA.VTA_Lupper_set
    __swig_getmethods__["Lupper"] = _VTA.VTA_Lupper_get
    if _newclass:
        Lupper = _swig_property(_VTA.VTA_Lupper_get, _VTA.VTA_Lupper_set)
    __swig_setmethods__["Rlower"] = _VTA.VTA_Rlower_set
    __swig_getmethods__["Rlower"] = _VTA.VTA_Rlower_get
    if _newclass:
        Rlower = _swig_property(_VTA.VTA_Rlower_get, _VTA.VTA_Rlower_set)
    __swig_setmethods__["Rmean"] = _VTA.VTA_Rmean_set
    __swig_getmethods__["Rmean"] = _VTA.VTA_Rmean_get
    if _newclass:
        Rmean = _swig_property(_VTA.VTA_Rmean_get, _VTA.VTA_Rmean_set)
    __swig_setmethods__["Rupper"] = _VTA.VTA_Rupper_set
    __swig_getmethods__["Rupper"] = _VTA.VTA_Rupper_get
    if _newclass:
        Rupper = _swig_property(_VTA.VTA_Rupper_get, _VTA.VTA_Rupper_set)
    __swig_setmethods__["reslt"] = _VTA.VTA_reslt_set
    __swig_getmethods__["reslt"] = _VTA.VTA_reslt_get
    if _newclass:
        reslt = _swig_property(_VTA.VTA_reslt_get, _VTA.VTA_reslt_set)
    __swig_setmethods__["lower"] = _VTA.VTA_lower_set
    __swig_getmethods__["lower"] = _VTA.VTA_lower_get
    if _newclass:
        lower = _swig_property(_VTA.VTA_lower_get, _VTA.VTA_lower_set)
    __swig_setmethods__["upper"] = _VTA.VTA_upper_set
    __swig_getmethods__["upper"] = _VTA.VTA_upper_get
    if _newclass:
        upper = _swig_property(_VTA.VTA_upper_get, _VTA.VTA_upper_set)
    __swig_setmethods__["vmean"] = _VTA.VTA_vmean_set
    __swig_getmethods__["vmean"] = _VTA.VTA_vmean_get
    if _newclass:
        vmean = _swig_property(_VTA.VTA_vmean_get, _VTA.VTA_vmean_set)

    def __init__(self, *args):
        this = _VTA.new_VTA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Measure(self, v=True):
        return _VTA.VTA_Measure(self, v)

    def setDBG(self, v=True, w=False):
        return _VTA.VTA_setDBG(self, v, w)

    def setUniq(self, v=True):
        return _VTA.VTA_setUniq(self, v)

    def setScl(self, v=0):
        return _VTA.VTA_setScl(self, v)

    def setLims(self, v=True):
        return _VTA.VTA_setLims(self, v)

    def setFile(self, s):
        return _VTA.VTA_setFile(self, s)

    def compute(self, cut, Lkts, logM, trimV, first, last, mid=-1):
        return _VTA.VTA_compute(self, cut, Lkts, logM, trimV, first, last, mid)

    def setCounter(self, n):
        return _VTA.VTA_setCounter(self, n)

    def getFraction(self):
        return _VTA.VTA_getFraction(self)
    __swig_destroy__ = _VTA.delete_VTA
    __del__ = lambda self: None
VTA_swigregister = _VTA.VTA_swigregister
VTA_swigregister(VTA)
cvar = _VTA.cvar

# This file is compatible with both classic and new-style classes.


