# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_State')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_State')
    _State = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_State', [dirname(__file__)])
        except ImportError:
            import _State
            return _State
        if fp is not None:
            try:
                _mod = imp.load_module('_State', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _State = swig_import_helper()
    del swig_import_helper
else:
    import _State
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class StateInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateInfo, name)
    __repr__ = _swig_repr
    _None = _State.StateInfo__None
    Block = _State.StateInfo_Block
    Mixture = _State.StateInfo_Mixture
    Extended = _State.StateInfo_Extended
    RJTwo = _State.StateInfo_RJTwo
    __swig_setmethods__["ptype"] = _State.StateInfo_ptype_set
    __swig_getmethods__["ptype"] = _State.StateInfo_ptype_get
    if _newclass:
        ptype = _swig_property(_State.StateInfo_ptype_get, _State.StateInfo_ptype_set)
    Standard = _State.StateInfo_Standard
    PositiveDef = _State.StateInfo_PositiveDef
    FixedNorm = _State.StateInfo_FixedNorm
    __swig_setmethods__["Block_beg"] = _State.StateInfo_Block_beg_set
    __swig_getmethods__["Block_beg"] = _State.StateInfo_Block_beg_get
    if _newclass:
        Block_beg = _swig_property(_State.StateInfo_Block_beg_get, _State.StateInfo_Block_beg_set)
    __swig_setmethods__["Block_end"] = _State.StateInfo_Block_end_set
    __swig_getmethods__["Block_end"] = _State.StateInfo_Block_end_get
    if _newclass:
        Block_end = _swig_property(_State.StateInfo_Block_end_get, _State.StateInfo_Block_end_set)
    __swig_setmethods__["bType"] = _State.StateInfo_bType_set
    __swig_getmethods__["bType"] = _State.StateInfo_bType_get
    if _newclass:
        bType = _swig_property(_State.StateInfo_bType_get, _State.StateInfo_bType_set)
    __swig_setmethods__["Block_mask"] = _State.StateInfo_Block_mask_set
    __swig_getmethods__["Block_mask"] = _State.StateInfo_Block_mask_get
    if _newclass:
        Block_mask = _swig_property(_State.StateInfo_Block_mask_get, _State.StateInfo_Block_mask_set)
    __swig_setmethods__["nBlocks"] = _State.StateInfo_nBlocks_set
    __swig_getmethods__["nBlocks"] = _State.StateInfo_nBlocks_get
    if _newclass:
        nBlocks = _swig_property(_State.StateInfo_nBlocks_get, _State.StateInfo_nBlocks_set)
    __swig_setmethods__["T"] = _State.StateInfo_T_set
    __swig_getmethods__["T"] = _State.StateInfo_T_get
    if _newclass:
        T = _swig_property(_State.StateInfo_T_get, _State.StateInfo_T_set)
    __swig_setmethods__["N1"] = _State.StateInfo_N1_set
    __swig_getmethods__["N1"] = _State.StateInfo_N1_get
    if _newclass:
        N1 = _swig_property(_State.StateInfo_N1_get, _State.StateInfo_N1_set)
    __swig_setmethods__["N2"] = _State.StateInfo_N2_set
    __swig_getmethods__["N2"] = _State.StateInfo_N2_get
    if _newclass:
        N2 = _swig_property(_State.StateInfo_N2_get, _State.StateInfo_N2_set)
    __swig_setmethods__["M"] = _State.StateInfo_M_set
    __swig_getmethods__["M"] = _State.StateInfo_M_get
    if _newclass:
        M = _swig_property(_State.StateInfo_M_get, _State.StateInfo_M_set)
    __swig_setmethods__["Ndim"] = _State.StateInfo_Ndim_set
    __swig_getmethods__["Ndim"] = _State.StateInfo_Ndim_get
    if _newclass:
        Ndim = _swig_property(_State.StateInfo_Ndim_get, _State.StateInfo_Ndim_set)
    __swig_setmethods__["Next"] = _State.StateInfo_Next_set
    __swig_getmethods__["Next"] = _State.StateInfo_Next_get
    if _newclass:
        Next = _swig_property(_State.StateInfo_Next_get, _State.StateInfo_Next_set)
    __swig_setmethods__["Ntot"] = _State.StateInfo_Ntot_set
    __swig_getmethods__["Ntot"] = _State.StateInfo_Ntot_get
    if _newclass:
        Ntot = _swig_property(_State.StateInfo_Ntot_get, _State.StateInfo_Ntot_set)
    __swig_setmethods__["iorder"] = _State.StateInfo_iorder_set
    __swig_getmethods__["iorder"] = _State.StateInfo_iorder_get
    if _newclass:
        iorder = _swig_property(_State.StateInfo_iorder_get, _State.StateInfo_iorder_set)
    __swig_setmethods__["ParamLabels"] = _State.StateInfo_ParamLabels_set
    __swig_getmethods__["ParamLabels"] = _State.StateInfo_ParamLabels_get
    if _newclass:
        ParamLabels = _swig_property(_State.StateInfo_ParamLabels_get, _State.StateInfo_ParamLabels_set)
    __swig_setmethods__["ExtLabels"] = _State.StateInfo_ExtLabels_set
    __swig_getmethods__["ExtLabels"] = _State.StateInfo_ExtLabels_get
    if _newclass:
        ExtLabels = _swig_property(_State.StateInfo_ExtLabels_get, _State.StateInfo_ExtLabels_set)
    __swig_setmethods__["StateLabels"] = _State.StateInfo_StateLabels_set
    __swig_getmethods__["StateLabels"] = _State.StateInfo_StateLabels_get
    if _newclass:
        StateLabels = _swig_property(_State.StateInfo_StateLabels_get, _State.StateInfo_StateLabels_set)

    def __init__(self, *args):
        this = _State.new_StateInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _State.delete_StateInfo
    __del__ = lambda self: None

    def setOrdering(self, n):
        return _State.StateInfo_setOrdering(self, n)

    def labelAll(self, *args):
        return _State.StateInfo_labelAll(self, *args)

    def labelMixture(self, *args):
        return _State.StateInfo_labelMixture(self, *args)

    def labelExtended(self, *args):
        return _State.StateInfo_labelExtended(self, *args)

    def labelFromModel(self, mod):
        return _State.StateInfo_labelFromModel(self, mod)

    def labelFromLike(self, like):
        return _State.StateInfo_labelFromLike(self, like)

    def Reset(self, M, s):
        return _State.StateInfo_Reset(self, M, s)

    def ParameterDescription(self, i):
        return _State.StateInfo_ParameterDescription(self, i)
StateInfo_swigregister = _State.StateInfo_swigregister
StateInfo_swigregister(StateInfo)

class State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _State.new_State(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _State.delete_State
    __del__ = lambda self: None

    def vec(self, *args):
        return _State.State_vec(self, *args)

    def Mmax(self):
        return _State.State_Mmax(self)

    def M(self):
        return _State.State_M(self)

    def Ndim(self):
        return _State.State_Ndim(self)

    def N(self):
        return _State.State_N(self)

    def Next(self):
        return _State.State_Next(self)

    def Reset(self, M):
        return _State.State_Reset(self, M)

    def Type(self):
        return _State.State_Type(self)

    def SI(self):
        return _State.State_SI(self)

    def bIndex(self, *args):
        return _State.State_bIndex(self, *args)

    def change(self, j):
        return _State.State_change(self, j)

    def bBeg(self):
        return _State.State_bBeg(self)

    def bEnd(self):
        return _State.State_bEnd(self)

    def nBlocks(self):
        return _State.State_nBlocks(self)

    def bType(self):
        return _State.State_bType(self)

    def Wght(self, *args):
        return _State.State_Wght(self, *args)

    def Phi(self, *args):
        return _State.State_Phi(self, *args)

    def Ext(self, arg2):
        return _State.State_Ext(self, arg2)

    def setState(self, *args):
        return _State.State_setState(self, *args)

    def setOrdering(self, n):
        return _State.State_setOrdering(self, n)

    def getOrdering(self):
        return _State.State_getOrdering(self)

    def Reorder(self):
        return _State.State_Reorder(self)

    def ParameterDescription(self, i):
        return _State.State_ParameterDescription(self, i)

    def enforce(self):
        return _State.State_enforce(self)

    def LabelHeader(self):
        return _State.State_LabelHeader(self)

    def outputPrecision(self, n):
        return _State.State_outputPrecision(self, n)

    def Broadcast(self, id):
        return _State.State_Broadcast(self, id)
State_swigregister = _State.State_swigregister
State_swigregister(State)

# This file is compatible with both classic and new-style classes.


