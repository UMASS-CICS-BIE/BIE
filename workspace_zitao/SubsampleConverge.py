# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SubsampleConverge')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SubsampleConverge')
    _SubsampleConverge = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SubsampleConverge', [dirname(__file__)])
        except ImportError:
            import _SubsampleConverge
            return _SubsampleConverge
        if fp is not None:
            try:
                _mod = imp.load_module('_SubsampleConverge', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SubsampleConverge = swig_import_helper()
    del swig_import_helper
else:
    import _SubsampleConverge
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SubsampleConverge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubsampleConverge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubsampleConverge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Nint"] = _SubsampleConverge.SubsampleConverge_Nint_set
    __swig_getmethods__["Nint"] = _SubsampleConverge.SubsampleConverge_Nint_get
    if _newclass:
        Nint = _swig_property(_SubsampleConverge.SubsampleConverge_Nint_get, _SubsampleConverge.SubsampleConverge_Nint_set)
    __swig_setmethods__["Ngrp"] = _SubsampleConverge.SubsampleConverge_Ngrp_set
    __swig_getmethods__["Ngrp"] = _SubsampleConverge.SubsampleConverge_Ngrp_get
    if _newclass:
        Ngrp = _swig_property(_SubsampleConverge.SubsampleConverge_Ngrp_get, _SubsampleConverge.SubsampleConverge_Ngrp_set)
    __swig_setmethods__["nconsec"] = _SubsampleConverge.SubsampleConverge_nconsec_set
    __swig_getmethods__["nconsec"] = _SubsampleConverge.SubsampleConverge_nconsec_get
    if _newclass:
        nconsec = _swig_property(_SubsampleConverge.SubsampleConverge_nconsec_get, _SubsampleConverge.SubsampleConverge_nconsec_set)
    __swig_setmethods__["ngood"] = _SubsampleConverge.SubsampleConverge_ngood_set
    __swig_getmethods__["ngood"] = _SubsampleConverge.SubsampleConverge_ngood_get
    if _newclass:
        ngood = _swig_property(_SubsampleConverge.SubsampleConverge_ngood_get, _SubsampleConverge.SubsampleConverge_ngood_set)
    __swig_setmethods__["nstart"] = _SubsampleConverge.SubsampleConverge_nstart_set
    __swig_getmethods__["nstart"] = _SubsampleConverge.SubsampleConverge_nstart_get
    if _newclass:
        nstart = _swig_property(_SubsampleConverge.SubsampleConverge_nstart_get, _SubsampleConverge.SubsampleConverge_nstart_set)
    __swig_setmethods__["alpha"] = _SubsampleConverge.SubsampleConverge_alpha_set
    __swig_getmethods__["alpha"] = _SubsampleConverge.SubsampleConverge_alpha_get
    if _newclass:
        alpha = _swig_property(_SubsampleConverge.SubsampleConverge_alpha_get, _SubsampleConverge.SubsampleConverge_alpha_set)
    __swig_setmethods__["rtol"] = _SubsampleConverge.SubsampleConverge_rtol_set
    __swig_getmethods__["rtol"] = _SubsampleConverge.SubsampleConverge_rtol_get
    if _newclass:
        rtol = _swig_property(_SubsampleConverge.SubsampleConverge_rtol_get, _SubsampleConverge.SubsampleConverge_rtol_set)
    __swig_setmethods__["scale"] = _SubsampleConverge.SubsampleConverge_scale_set
    __swig_getmethods__["scale"] = _SubsampleConverge.SubsampleConverge_scale_get
    if _newclass:
        scale = _swig_property(_SubsampleConverge.SubsampleConverge_scale_get, _SubsampleConverge.SubsampleConverge_scale_set)
    __swig_setmethods__["verbose"] = _SubsampleConverge.SubsampleConverge_verbose_set
    __swig_getmethods__["verbose"] = _SubsampleConverge.SubsampleConverge_verbose_get
    if _newclass:
        verbose = _swig_property(_SubsampleConverge.SubsampleConverge_verbose_get, _SubsampleConverge.SubsampleConverge_verbose_set)
    __swig_setmethods__["tiny"] = _SubsampleConverge.SubsampleConverge_tiny_set
    __swig_getmethods__["tiny"] = _SubsampleConverge.SubsampleConverge_tiny_get
    if _newclass:
        tiny = _swig_property(_SubsampleConverge.SubsampleConverge_tiny_get, _SubsampleConverge.SubsampleConverge_tiny_set)

    def __init__(self, m, d, id):
        this = _SubsampleConverge.new_SubsampleConverge(m, d, id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Converged(self):
        return _SubsampleConverge.SubsampleConverge_Converged(self)

    def setNburn(self, n):
        return _SubsampleConverge.SubsampleConverge_setNburn(self, n)

    def setConsec(self, n):
        return _SubsampleConverge.SubsampleConverge_setConsec(self, n)

    def setNgood(self, n):
        return _SubsampleConverge.SubsampleConverge_setNgood(self, n)

    def ConvergedIndex(self):
        return _SubsampleConverge.SubsampleConverge_ConvergedIndex(self)

    def BurnIn(self):
        return _SubsampleConverge.SubsampleConverge_BurnIn(self)

    def setRcovTol(self, r):
        return _SubsampleConverge.SubsampleConverge_setRcovTol(self, r)

    def AccumData(self, probs, state):
        return _SubsampleConverge.SubsampleConverge_AccumData(self, probs, state)

    def GetLast(self, value, state):
        return _SubsampleConverge.SubsampleConverge_GetLast(self, value, state)

    def ComputeDistribution(self):
        return _SubsampleConverge.SubsampleConverge_ComputeDistribution(self)

    def New(self, *args):
        return _SubsampleConverge.SubsampleConverge_New(self, *args)
    __swig_destroy__ = _SubsampleConverge.delete_SubsampleConverge
    __del__ = lambda self: None
SubsampleConverge_swigregister = _SubsampleConverge.SubsampleConverge_swigregister
SubsampleConverge_swigregister(SubsampleConverge)
cvar = _SubsampleConverge.cvar

# This file is compatible with both classic and new-style classes.


