# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SliceSampler')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SliceSampler')
    _SliceSampler = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SliceSampler', [dirname(__file__)])
        except ImportError:
            import _SliceSampler
            return _SliceSampler
        if fp is not None:
            try:
                _mod = imp.load_module('_SliceSampler', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SliceSampler = swig_import_helper()
    del swig_import_helper
else:
    import _SliceSampler
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SliceSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SliceSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SliceSampler, name)
    __repr__ = _swig_repr
    parallel = _SliceSampler.SliceSampler_parallel
    serial = _SliceSampler.SliceSampler_serial
    __swig_setmethods__["cntrl"] = _SliceSampler.SliceSampler_cntrl_set
    __swig_getmethods__["cntrl"] = _SliceSampler.SliceSampler_cntrl_get
    if _newclass:
        cntrl = _swig_property(_SliceSampler.SliceSampler_cntrl_get, _SliceSampler.SliceSampler_cntrl_set)

    def __init__(self, *args):
        this = _SliceSampler.new_SliceSampler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SliceSampler.delete_SliceSampler
    __del__ = lambda self: None

    def SetControl(self, m):
        return _SliceSampler.SliceSampler_SetControl(self, m)

    def clampingOn(self):
        return _SliceSampler.SliceSampler_clampingOn(self)

    def MCMethod(self):
        return _SliceSampler.SliceSampler_MCMethod(self)

    def PrintStateDiagnostic(self):
        return _SliceSampler.SliceSampler_PrintStateDiagnostic(self)

    def PrintStepDiagnostic(self):
        return _SliceSampler.SliceSampler_PrintStepDiagnostic(self)

    def ResetDiagnostics(self):
        return _SliceSampler.SliceSampler_ResetDiagnostics(self)

    def LogState(self, *args):
        return _SliceSampler.SliceSampler_LogState(self, *args)
SliceSampler_swigregister = _SliceSampler.SliceSampler_swigregister
SliceSampler_swigregister(SliceSampler)
cvar = _SliceSampler.cvar

class Simulation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Simulation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state_diag"] = _SliceSampler.Simulation_state_diag_set
    __swig_getmethods__["state_diag"] = _SliceSampler.Simulation_state_diag_get
    if _newclass:
        state_diag = _swig_property(_SliceSampler.Simulation_state_diag_get, _SliceSampler.Simulation_state_diag_set)
    __swig_setmethods__["output_prec"] = _SliceSampler.Simulation_output_prec_set
    __swig_getmethods__["output_prec"] = _SliceSampler.Simulation_output_prec_get
    if _newclass:
        output_prec = _swig_property(_SliceSampler.Simulation_output_prec_get, _SliceSampler.Simulation_output_prec_set)

    def __init__(self, *args):
        this = _SliceSampler.new_Simulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SliceSampler.delete_Simulation
    __del__ = lambda self: None

    def Reinitialize(self, width, p):
        return _SliceSampler.Simulation_Reinitialize(self, width, p)

    def OneStep(self):
        return _SliceSampler.Simulation_OneStep(self)

    def getConverge(self):
        return _SliceSampler.Simulation_getConverge(self)

    def Convergence(self):
        return _SliceSampler.Simulation_Convergence(self)

    def BurnIn(self):
        return _SliceSampler.Simulation_BurnIn(self)

    def AccumConverge(self, *args):
        return _SliceSampler.Simulation_AccumConverge(self, *args)

    def NewConvergence(self, m, d, id):
        return _SliceSampler.Simulation_NewConvergence(self, m, d, id)

    def GetFromPrior(self):
        return _SliceSampler.Simulation_GetFromPrior(self)

    def Likelihood(self, arg2, indx):
        return _SliceSampler.Simulation_Likelihood(self, arg2, indx)

    def PriorValue(self, arg2):
        return _SliceSampler.Simulation_PriorValue(self, arg2)

    def GetState(self):
        return _SliceSampler.Simulation_GetState(self)

    def PrintStepDiagnostic(self):
        return _SliceSampler.Simulation_PrintStepDiagnostic(self)

    def PrintStateDiagnostic(self):
        return _SliceSampler.Simulation_PrintStateDiagnostic(self)

    def ResetDiagnostics(self):
        return _SliceSampler.Simulation_ResetDiagnostics(self)

    def ReportState(self, *args):
        return _SliceSampler.Simulation_ReportState(self, *args)

    def LogState(self, *args):
        return _SliceSampler.Simulation_LogState(self, *args)

    def GetValue(self):
        return _SliceSampler.Simulation_GetValue(self)

    def GetPriorValue(self):
        return _SliceSampler.Simulation_GetPriorValue(self)

    def GetLikelihoodValue(self):
        return _SliceSampler.Simulation_GetLikelihoodValue(self)

    def SetThreshold(self, v):
        return _SliceSampler.Simulation_SetThreshold(self, v)

    def SetUserLikelihood(self, fct):
        return _SliceSampler.Simulation_SetUserLikelihood(self, fct)

    def GetPreviousSimulation(self):
        return _SliceSampler.Simulation_GetPreviousSimulation(self)

    def ResetFrontier(self):
        return _SliceSampler.Simulation_ResetFrontier(self)

    def SetPriorFrontier(self, f):
        return _SliceSampler.Simulation_SetPriorFrontier(self, f)

    def GetMcur(self):
        return _SliceSampler.Simulation_GetMcur(self)

    def GetNdim(self):
        return _SliceSampler.Simulation_GetNdim(self)

    def GetStateDiag(self, b, d, s, u):
        return _SliceSampler.Simulation_GetStateDiag(self, b, d, s, u)

    def GetDataTree(self):
        return _SliceSampler.Simulation_GetDataTree(self)

    def GetLike(self):
        return _SliceSampler.Simulation_GetLike(self)

    def GetMCA(self):
        return _SliceSampler.Simulation_GetMCA(self)

    def GetPrior(self):
        return _SliceSampler.Simulation_GetPrior(self)

    def GetMHWidth(self):
        return _SliceSampler.Simulation_GetMHWidth(self)

    def currentFrontier(self):
        return _SliceSampler.Simulation_currentFrontier(self)

    def priorFrontier(self):
        return _SliceSampler.Simulation_priorFrontier(self)

    def NewState(self, *args):
        return _SliceSampler.Simulation_NewState(self, *args)

    def PrintState(self):
        return _SliceSampler.Simulation_PrintState(self)

    def Serial(self):
        return _SliceSampler.Simulation_Serial(self)

    def Parallel(self):
        return _SliceSampler.Simulation_Parallel(self)

    def SI(self):
        return _SliceSampler.Simulation_SI(self)

    def AdditionalInfo(self):
        return _SliceSampler.Simulation_AdditionalInfo(self)
    __swig_setmethods__["LP"] = _SliceSampler.Simulation_LP_set
    __swig_getmethods__["LP"] = _SliceSampler.Simulation_LP_get
    if _newclass:
        LP = _swig_property(_SliceSampler.Simulation_LP_get, _SliceSampler.Simulation_LP_set)

    def DebugState(self, s):
        return _SliceSampler.Simulation_DebugState(self, s)
Simulation_swigregister = _SliceSampler.Simulation_swigregister
Simulation_swigregister(Simulation)

class Serializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serializable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SliceSampler.new_Serializable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SliceSampler.delete_Serializable
    __del__ = lambda self: None
Serializable_swigregister = _SliceSampler.Serializable_swigregister
Serializable_swigregister(Serializable)

# This file is compatible with both classic and new-style classes.


