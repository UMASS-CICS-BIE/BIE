# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StdCandle2')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StdCandle2')
    _StdCandle2 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StdCandle2', [dirname(__file__)])
        except ImportError:
            import _StdCandle2
            return _StdCandle2
        if fp is not None:
            try:
                _mod = imp.load_module('_StdCandle2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StdCandle2 = swig_import_helper()
    del swig_import_helper
else:
    import _StdCandle2
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

TABLE_EVEN = _StdCandle2.TABLE_EVEN
class StdCandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdCandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdCandle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NUM"] = _StdCandle2.StdCandle_NUM_set
    __swig_getmethods__["NUM"] = _StdCandle2.StdCandle_NUM_get
    if _newclass:
        NUM = _swig_property(_StdCandle2.StdCandle_NUM_get, _StdCandle2.StdCandle_NUM_set)
    __swig_setmethods__["NTAB"] = _StdCandle2.StdCandle_NTAB_set
    __swig_getmethods__["NTAB"] = _StdCandle2.StdCandle_NTAB_get
    if _newclass:
        NTAB = _swig_property(_StdCandle2.StdCandle_NTAB_get, _StdCandle2.StdCandle_NTAB_set)
    __swig_setmethods__["ALPHA"] = _StdCandle2.StdCandle_ALPHA_set
    __swig_getmethods__["ALPHA"] = _StdCandle2.StdCandle_ALPHA_get
    if _newclass:
        ALPHA = _swig_property(_StdCandle2.StdCandle_ALPHA_get, _StdCandle2.StdCandle_ALPHA_set)
    __swig_setmethods__["BETA"] = _StdCandle2.StdCandle_BETA_set
    __swig_getmethods__["BETA"] = _StdCandle2.StdCandle_BETA_get
    if _newclass:
        BETA = _swig_property(_StdCandle2.StdCandle_BETA_get, _StdCandle2.StdCandle_BETA_set)
    __swig_setmethods__["R"] = _StdCandle2.StdCandle_R_set
    __swig_getmethods__["R"] = _StdCandle2.StdCandle_R_get
    if _newclass:
        R = _swig_property(_StdCandle2.StdCandle_R_get, _StdCandle2.StdCandle_R_set)
    __swig_setmethods__["AK"] = _StdCandle2.StdCandle_AK_set
    __swig_getmethods__["AK"] = _StdCandle2.StdCandle_AK_get
    if _newclass:
        AK = _swig_property(_StdCandle2.StdCandle_AK_get, _StdCandle2.StdCandle_AK_set)
    __swig_setmethods__["NITER"] = _StdCandle2.StdCandle_NITER_set
    __swig_getmethods__["NITER"] = _StdCandle2.StdCandle_NITER_get
    if _newclass:
        NITER = _swig_property(_StdCandle2.StdCandle_NITER_get, _StdCandle2.StdCandle_NITER_set)
    __swig_setmethods__["tol"] = _StdCandle2.StdCandle_tol_set
    __swig_getmethods__["tol"] = _StdCandle2.StdCandle_tol_get
    if _newclass:
        tol = _swig_property(_StdCandle2.StdCandle_tol_get, _StdCandle2.StdCandle_tol_set)
    __swig_setmethods__["Log10"] = _StdCandle2.StdCandle_Log10_set
    __swig_getmethods__["Log10"] = _StdCandle2.StdCandle_Log10_get
    if _newclass:
        Log10 = _swig_property(_StdCandle2.StdCandle_Log10_get, _StdCandle2.StdCandle_Log10_set)
    __swig_setmethods__["onedeg"] = _StdCandle2.StdCandle_onedeg_set
    __swig_getmethods__["onedeg"] = _StdCandle2.StdCandle_onedeg_get
    if _newclass:
        onedeg = _swig_property(_StdCandle2.StdCandle_onedeg_get, _StdCandle2.StdCandle_onedeg_set)

    def __init__(self, *args):
        this = _StdCandle2.new_StdCandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def New(self):
        return _StdCandle2.StdCandle_New(self)

    def set(self, a1, h, k0, sigk, klow, klim):
        return _StdCandle2.StdCandle_set(self, a1, h, k0, sigk, klow, klim)
    __swig_destroy__ = _StdCandle2.delete_StdCandle
    __del__ = lambda self: None

    def initdens(self, l, b, kd=False):
        return _StdCandle2.StdCandle_initdens(self, l, b, kd)

    def dens(self, a, z, l, b, kd=False):
        return _StdCandle2.StdCandle_dens(self, a, z, l, b, kd)

    def kfrac(self, kmin, kmax):
        return _StdCandle2.StdCandle_kfrac(self, kmin, kmax)

    def kfracD(self, k):
        return _StdCandle2.StdCandle_kfracD(self, k)

    def realize(self, a, z):
        return _StdCandle2.StdCandle_realize(self, a, z)

    def print_kfrac(self, arg2):
        return _StdCandle2.StdCandle_print_kfrac(self, arg2)
StdCandle_swigregister = _StdCandle2.StdCandle_swigregister
StdCandle_swigregister(StdCandle)
cvar = _StdCandle2.cvar

# This file is compatible with both classic and new-style classes.


