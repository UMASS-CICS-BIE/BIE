// This is really -*- C++ -*-

#ifndef LikelihoodFunction_h
#define LikelihoodFunction_h

#include <vector>
#include <string>

#include <Tile.h>
#include <Distribution.h>
#include <BIEconfig.h>

#include "Serializable.h"


namespace BIE {

  //! @defgroup likefunc Likelihood functions
  //! Classes of likelihood functions that implement handling both
  //! user-define and BIE native data streams.
  //! @{

  //! Functionoid for goodness-of-fit testing
  class Funct1d
  {
  public:
    //! The function name to be overridden
    virtual double G(double) = 0;
  };

  /** \var Fct1dPtr
      \brief A typedef for the functionoid pointer

      This is used to define a base-interface for passing the function
      space instance to the model for evaluation for non-parameteric
      goodness-of-fit testing.
  **/
  typedef Funct1d* Fct1dPtr;


  //+ CLICLASS LikelihoodFunction
  //! This abstract class defines allows the arbitrarily defined likelihood 
  //! functions to be used by internal classes and to be easily defined to
  //! the system by the user.
  //! 
  //! GaussTestLikelihoodFunction for an example of deriving a new likelihood
  //! function.
  class LikelihoodFunction: public Serializable
  {
  public:

    //! Value below which to assume that data value is zero (default=0)
    static double threshval;

    //! This is likelihood function
    virtual double LikeProb(std::vector<double> &z, SampleDistribution* sd, 
			    double norm, Tile *t, State *s, int indx) = 0;

    /** This returns the joint cumulative distribution for
	goodness-of-fit testing.

	I'd prefer to make this pure virtual, but it will break existing
	(esp. user) implementations.
    */
    virtual double CumuProb(std::vector<double> &z, SampleDistribution* sd, 
			    double norm, Tile *t, State *s, int indx, 
			    Fct1dPtr f)
    { return 1.0; }

    /** Returns the likelihood and the joint cumulative value.

	This may be overridden to provide a more efficient
	implementation.  This simply calls both functions serially.
    */
    virtual pair<double, double>
      LikeProb(std::vector<double> &z, SampleDistribution* sd, 
	       double norm, Tile *t, State *s, int indx, Fct1dPtr f)
    {
      pair<double, double> ret;
      // This ensures that the call order is preserved;
      ret.first  = LikeProb(z, sd, norm, t, s, indx);
      ret.second = CumuProb(z, sd, norm, t, s, indx, f);
      return ret;
    }

    //! Label parameters
    virtual const std::string ParameterDescription(int i) { return ""; }

    #ifndef SWIG
    // AUTO GENERATED BY ../persistence/autopersist.py
    protected:
    LikelihoodFunction() {}
    private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version) {
        this->pre_serialize(ar, version);
         try {                                                         
          ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(Serializable);            
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(threshval);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
        this->post_serialize(ar, version);
    }
    #endif

  };

  //! @}

} // namespace BIE
#ifndef SWIG
BIE_CLASS_EXPORT_KEY(BIE::LikelihoodFunction)
#endif
#endif
