# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BSPTree', [dirname(__file__)])
        except ImportError:
            import _BSPTree
            return _BSPTree
        if fp is not None:
            try:
                _mod = imp.load_module('_BSPTree', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BSPTree = swig_import_helper()
    del swig_import_helper
else:
    import _BSPTree
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Serializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serializable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _BSPTree.new_Serializable()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BSPTree.delete_Serializable
    __del__ = lambda self: None
Serializable_swigregister = _BSPTree.Serializable_swigregister
Serializable_swigregister(Serializable)

class LeafData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LeafData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LeafData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["exp_scale"] = _BSPTree.LeafData_exp_scale_set
    __swig_getmethods__["exp_scale"] = _BSPTree.LeafData_exp_scale_get
    if _newclass:
        exp_scale = _swig_property(_BSPTree.LeafData_exp_scale_get, _BSPTree.LeafData_exp_scale_set)

    def __init__(self):
        this = _BSPTree.new_LeafData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["pvals"] = _BSPTree.LeafData_pvals_set
    __swig_getmethods__["pvals"] = _BSPTree.LeafData_pvals_get
    if _newclass:
        pvals = _swig_property(_BSPTree.LeafData_pvals_get, _BSPTree.LeafData_pvals_set)
    __swig_setmethods__["minP"] = _BSPTree.LeafData_minP_set
    __swig_getmethods__["minP"] = _BSPTree.LeafData_minP_get
    if _newclass:
        minP = _swig_property(_BSPTree.LeafData_minP_get, _BSPTree.LeafData_minP_set)
    __swig_setmethods__["medP"] = _BSPTree.LeafData_medP_set
    __swig_getmethods__["medP"] = _BSPTree.LeafData_medP_get
    if _newclass:
        medP = _swig_property(_BSPTree.LeafData_medP_get, _BSPTree.LeafData_medP_set)
    __swig_setmethods__["maxP"] = _BSPTree.LeafData_maxP_set
    __swig_getmethods__["maxP"] = _BSPTree.LeafData_maxP_get
    if _newclass:
        maxP = _swig_property(_BSPTree.LeafData_maxP_get, _BSPTree.LeafData_maxP_set)
    __swig_setmethods__["vol"] = _BSPTree.LeafData_vol_set
    __swig_getmethods__["vol"] = _BSPTree.LeafData_vol_get
    if _newclass:
        vol = _swig_property(_BSPTree.LeafData_vol_get, _BSPTree.LeafData_vol_set)

    def volume(self, p):
        return _BSPTree.LeafData_volume(self, p)
    __swig_destroy__ = _BSPTree.delete_LeafData
    __del__ = lambda self: None
LeafData_swigregister = _BSPTree.LeafData_swigregister
LeafData_swigregister(LeafData)
cvar = _BSPTree.cvar

class BSPTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSPTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BSPTree, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["lower_quant"] = _BSPTree.BSPTree_lower_quant_set
    __swig_getmethods__["lower_quant"] = _BSPTree.BSPTree_lower_quant_get
    if _newclass:
        lower_quant = _swig_property(_BSPTree.BSPTree_lower_quant_get, _BSPTree.BSPTree_lower_quant_set)
    __swig_setmethods__["upper_quant"] = _BSPTree.BSPTree_upper_quant_set
    __swig_getmethods__["upper_quant"] = _BSPTree.BSPTree_upper_quant_get
    if _newclass:
        upper_quant = _swig_property(_BSPTree.BSPTree_upper_quant_get, _BSPTree.BSPTree_upper_quant_set)
    __swig_setmethods__["full_volume"] = _BSPTree.BSPTree_full_volume_set
    __swig_getmethods__["full_volume"] = _BSPTree.BSPTree_full_volume_get
    if _newclass:
        full_volume = _swig_property(_BSPTree.BSPTree_full_volume_get, _BSPTree.BSPTree_full_volume_set)
    __swig_setmethods__["geom_volume"] = _BSPTree.BSPTree_geom_volume_set
    __swig_getmethods__["geom_volume"] = _BSPTree.BSPTree_geom_volume_get
    if _newclass:
        geom_volume = _swig_property(_BSPTree.BSPTree_geom_volume_get, _BSPTree.BSPTree_geom_volume_set)
    __swig_setmethods__["fill_volume"] = _BSPTree.BSPTree_fill_volume_set
    __swig_getmethods__["fill_volume"] = _BSPTree.BSPTree_fill_volume_get
    if _newclass:
        fill_volume = _swig_property(_BSPTree.BSPTree_fill_volume_get, _BSPTree.BSPTree_fill_volume_set)
    __swig_setmethods__["fill_factor"] = _BSPTree.BSPTree_fill_factor_set
    __swig_getmethods__["fill_factor"] = _BSPTree.BSPTree_fill_factor_get
    if _newclass:
        fill_factor = _swig_property(_BSPTree.BSPTree_fill_factor_get, _BSPTree.BSPTree_fill_factor_set)
    __swig_setmethods__["dim1"] = _BSPTree.BSPTree_dim1_set
    __swig_getmethods__["dim1"] = _BSPTree.BSPTree_dim1_get
    if _newclass:
        dim1 = _swig_property(_BSPTree.BSPTree_dim1_get, _BSPTree.BSPTree_dim1_set)
    __swig_setmethods__["dim2"] = _BSPTree.BSPTree_dim2_set
    __swig_getmethods__["dim2"] = _BSPTree.BSPTree_dim2_get
    if _newclass:
        dim2 = _swig_property(_BSPTree.BSPTree_dim2_get, _BSPTree.BSPTree_dim2_set)
    __swig_destroy__ = _BSPTree.delete_BSPTree
    __del__ = lambda self: None

    def IntegralEval(self, data, mult, result, lower, upper, vmean):
        return _BSPTree.BSPTree_IntegralEval(self, data, mult, result, lower, upper, vmean)

    def LevelList(self, out, limits):
        return _BSPTree.BSPTree_LevelList(self, out, limits)

    def IntegralList(self, out, data, mult, allcells=False):
        return _BSPTree.BSPTree_IntegralList(self, out, data, mult, allcells)

    def IntegralCellList(self, out, ncut, data):
        return _BSPTree.BSPTree_IntegralCellList(self, out, ncut, data)

    def LebesgueIntegral(self, lower, mean, upper, knots, dindx, ncut, data, mult, logM=False, dlogM=1e20, dlogP=1e20, linear=False):
        return _BSPTree.BSPTree_LebesgueIntegral(self, lower, mean, upper, knots, dindx, ncut, data, mult, logM, dlogM, dlogP, linear)

    def LebesgueMeasure(self, *args):
        return _BSPTree.BSPTree_LebesgueMeasure(self, *args)

    def LebesgueVolume(self, m):
        return _BSPTree.BSPTree_LebesgueVolume(self, m)

    def MedianVolume(self, m):
        return _BSPTree.BSPTree_MedianVolume(self, m)

    def LebesgueEval(self, m, y):
        return _BSPTree.BSPTree_LebesgueEval(self, m, y)

    def SetVTrim(self, fraction):
        return _BSPTree.BSPTree_SetVTrim(self, fraction)

    def GetVTrim(self):
        return _BSPTree.BSPTree_GetVTrim(self)

    def LebesgueHisto(self, P, histoP, histoC, dindx, ncut, data, mult, m):
        return _BSPTree.BSPTree_LebesgueHisto(self, P, histoP, histoC, dindx, ncut, data, mult, m)

    def gnuplotDemo(self, data, mult, center, dindx, ncut):
        return _BSPTree.BSPTree_gnuplotDemo(self, data, mult, center, dindx, ncut)

    def EnclosedVolume(self):
        return _BSPTree.BSPTree_EnclosedVolume(self)
    __swig_getmethods__["SetRangeBounds"] = lambda x: _BSPTree.BSPTree_SetRangeBounds
    if _newclass:
        SetRangeBounds = staticmethod(_BSPTree.BSPTree_SetRangeBounds)

    def GetLowerBound(self):
        return _BSPTree.BSPTree_GetLowerBound(self)

    def GetUpperBound(self):
        return _BSPTree.BSPTree_GetUpperBound(self)
BSPTree_swigregister = _BSPTree.BSPTree_swigregister
BSPTree_swigregister(BSPTree)

def BSPTree_SetRangeBounds(lo, up):
    return _BSPTree.BSPTree_SetRangeBounds(lo, up)
BSPTree_SetRangeBounds = _BSPTree.BSPTree_SetRangeBounds

# This file is compatible with both classic and new-style classes.


