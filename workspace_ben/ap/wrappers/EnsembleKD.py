# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EnsembleKD', [dirname(__file__)])
        except ImportError:
            import _EnsembleKD
            return _EnsembleKD
        if fp is not None:
            try:
                _mod = imp.load_module('_EnsembleKD', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EnsembleKD = swig_import_helper()
    del swig_import_helper
else:
    import _EnsembleKD
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Serializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serializable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EnsembleKD.new_Serializable()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EnsembleKD.delete_Serializable
    __del__ = lambda self: None
Serializable_swigregister = _EnsembleKD.Serializable_swigregister
Serializable_swigregister(Serializable)

class Distribution(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Distribution, name)
    __repr__ = _swig_repr
    UniformAdd = _EnsembleKD.Distribution_UniformAdd
    UniformMult = _EnsembleKD.Distribution_UniformMult
    NormalAdd = _EnsembleKD.Distribution_NormalAdd
    NormalMult = _EnsembleKD.Distribution_NormalMult
    Undefined = _EnsembleKD.Distribution_Undefined

    def __init__(self):
        this = _EnsembleKD.new_Distribution()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EnsembleKD.delete_Distribution
    __del__ = lambda self: None

    def New(self):
        return _EnsembleKD.Distribution_New(self)

    def PDF(self, arg2):
        return _EnsembleKD.Distribution_PDF(self, arg2)

    def logPDF(self, arg2):
        return _EnsembleKD.Distribution_logPDF(self, arg2)

    def CDF(self, arg2):
        return _EnsembleKD.Distribution_CDF(self, arg2)

    def lower(self):
        return _EnsembleKD.Distribution_lower(self)

    def upper(self):
        return _EnsembleKD.Distribution_upper(self)

    def Mean(self):
        return _EnsembleKD.Distribution_Mean(self)

    def StdDev(self):
        return _EnsembleKD.Distribution_StdDev(self)

    def Moments(self, arg2):
        return _EnsembleKD.Distribution_Moments(self, arg2)

    def Sample(self):
        return _EnsembleKD.Distribution_Sample(self)

    def setWidth(self, x):
        return _EnsembleKD.Distribution_setWidth(self, x)

    def Type(self):
        return _EnsembleKD.Distribution_Type(self)

    def Dim(self):
        return _EnsembleKD.Distribution_Dim(self)
Distribution_swigregister = _EnsembleKD.Distribution_swigregister
Distribution_swigregister(Distribution)

class SampleDistribution(Distribution):
    __swig_setmethods__ = {}
    for _s in [Distribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Distribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleDistribution, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _EnsembleKD.delete_SampleDistribution
    __del__ = lambda self: None

    def CDF(self, arg2):
        return _EnsembleKD.SampleDistribution_CDF(self, arg2)

    def New(self):
        return _EnsembleKD.SampleDistribution_New(self)

    def AccumData(self, *args):
        return _EnsembleKD.SampleDistribution_AccumData(self, *args)

    def ComputeDistribution(self):
        return _EnsembleKD.SampleDistribution_ComputeDistribution(self)

    def numberData(self):
        return _EnsembleKD.SampleDistribution_numberData(self)

    def getValue(self, i):
        return _EnsembleKD.SampleDistribution_getValue(self, i)

    def getdim(self, i):
        return _EnsembleKD.SampleDistribution_getdim(self, i)

    def getRecordType(self):
        return _EnsembleKD.SampleDistribution_getRecordType(self)

    def getDataSetSize(self):
        return _EnsembleKD.SampleDistribution_getDataSetSize(self)
SampleDistribution_swigregister = _EnsembleKD.SampleDistribution_swigregister
SampleDistribution_swigregister(SampleDistribution)

class BinnedDistribution(SampleDistribution):
    __swig_setmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinnedDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinnedDistribution, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _EnsembleKD.delete_BinnedDistribution
    __del__ = lambda self: None

    def New(self):
        return _EnsembleKD.BinnedDistribution_New(self)

    def getLow(self, i):
        return _EnsembleKD.BinnedDistribution_getLow(self, i)

    def getHigh(self, i):
        return _EnsembleKD.BinnedDistribution_getHigh(self, i)

    def CDF(self, arg2):
        return _EnsembleKD.BinnedDistribution_CDF(self, arg2)
BinnedDistribution_swigregister = _EnsembleKD.BinnedDistribution_swigregister
BinnedDistribution_swigregister(BinnedDistribution)

class PointDistribution(SampleDistribution):
    __swig_setmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _EnsembleKD.new_PointDistribution(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EnsembleKD.delete_PointDistribution
    __del__ = lambda self: None

    def New(self):
        return _EnsembleKD.PointDistribution_New(self)

    def getRecordType(self):
        return _EnsembleKD.PointDistribution_getRecordType(self)

    def AccumData(self, v, datapoint):
        return _EnsembleKD.PointDistribution_AccumData(self, v, datapoint)

    def getdim(self, i):
        return _EnsembleKD.PointDistribution_getdim(self, i)

    def numberData(self):
        return _EnsembleKD.PointDistribution_numberData(self)

    def getValue(self, i):
        return _EnsembleKD.PointDistribution_getValue(self, i)

    def Point(self):
        return _EnsembleKD.PointDistribution_Point(self)

    def CDF(self, v):
        return _EnsembleKD.PointDistribution_CDF(self, v)
PointDistribution_swigregister = _EnsembleKD.PointDistribution_swigregister
PointDistribution_swigregister(PointDistribution)

class NullDistribution(SampleDistribution):
    __swig_setmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullDistribution, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EnsembleKD.new_NullDistribution()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EnsembleKD.delete_NullDistribution
    __del__ = lambda self: None

    def New(self):
        return _EnsembleKD.NullDistribution_New(self)
NullDistribution_swigregister = _EnsembleKD.NullDistribution_swigregister
NullDistribution_swigregister(NullDistribution)

class StateData(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateData, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prob"] = _EnsembleKD.StateData_prob_set
    __swig_getmethods__["prob"] = _EnsembleKD.StateData_prob_get
    if _newclass:
        prob = _swig_property(_EnsembleKD.StateData_prob_get, _EnsembleKD.StateData_prob_set)
    __swig_setmethods__["p"] = _EnsembleKD.StateData_p_set
    __swig_getmethods__["p"] = _EnsembleKD.StateData_p_get
    if _newclass:
        p = _swig_property(_EnsembleKD.StateData_p_get, _EnsembleKD.StateData_p_set)

    def __init__(self, *args):
        this = _EnsembleKD.new_StateData(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Broadcast(self):
        return _EnsembleKD.StateData_Broadcast(self)
    __swig_destroy__ = _EnsembleKD.delete_StateData
    __del__ = lambda self: None
StateData_swigregister = _EnsembleKD.StateData_swigregister
StateData_swigregister(StateData)

class PairIndex(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PairIndex, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EnsembleKD.new_PairIndex()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["index"] = _EnsembleKD.PairIndex_index_set
    __swig_getmethods__["index"] = _EnsembleKD.PairIndex_index_get
    if _newclass:
        index = _swig_property(_EnsembleKD.PairIndex_index_get, _EnsembleKD.PairIndex_index_set)
    __swig_setmethods__["value"] = _EnsembleKD.PairIndex_value_set
    __swig_getmethods__["value"] = _EnsembleKD.PairIndex_value_get
    if _newclass:
        value = _swig_property(_EnsembleKD.PairIndex_value_get, _EnsembleKD.PairIndex_value_set)

    def __eq__(self, t):
        return _EnsembleKD.PairIndex___eq__(self, t)
    __swig_destroy__ = _EnsembleKD.delete_PairIndex
    __del__ = lambda self: None
PairIndex_swigregister = _EnsembleKD.PairIndex_swigregister
PairIndex_swigregister(PairIndex)

class StateCache(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateCache, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateCache, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _EnsembleKD.new_StateCache(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EnsembleKD.delete_StateCache
    __del__ = lambda self: None

    def Mean(self, m):
        return _EnsembleKD.StateCache_Mean(self, m)

    def Sample(self, m):
        return _EnsembleKD.StateCache_Sample(self, m)

    def logPDF(self, P):
        return _EnsembleKD.StateCache_logPDF(self, P)

    def size(self):
        return _EnsembleKD.StateCache_size(self)

    def stateSize(self):
        return _EnsembleKD.StateCache_stateSize(self)
StateCache_swigregister = _EnsembleKD.StateCache_swigregister
StateCache_swigregister(StateCache)

class Ensemble(SampleDistribution):
    __swig_setmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ensemble, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ensemble, name)
    __repr__ = _swig_repr
    __swig_setmethods__["verbose_debug"] = _EnsembleKD.Ensemble_verbose_debug_set
    __swig_getmethods__["verbose_debug"] = _EnsembleKD.Ensemble_verbose_debug_get
    if _newclass:
        verbose_debug = _swig_property(_EnsembleKD.Ensemble_verbose_debug_get, _EnsembleKD.Ensemble_verbose_debug_set)
    __swig_setmethods__["verbose_default"] = _EnsembleKD.Ensemble_verbose_default_set
    __swig_getmethods__["verbose_default"] = _EnsembleKD.Ensemble_verbose_default_get
    if _newclass:
        verbose_default = _swig_property(_EnsembleKD.Ensemble_verbose_default_get, _EnsembleKD.Ensemble_verbose_default_set)
    __swig_setmethods__["keep"] = _EnsembleKD.Ensemble_keep_set
    __swig_getmethods__["keep"] = _EnsembleKD.Ensemble_keep_get
    if _newclass:
        keep = _swig_property(_EnsembleKD.Ensemble_keep_get, _EnsembleKD.Ensemble_keep_set)
    __swig_setmethods__["minsub"] = _EnsembleKD.Ensemble_minsub_set
    __swig_getmethods__["minsub"] = _EnsembleKD.Ensemble_minsub_get
    if _newclass:
        minsub = _swig_property(_EnsembleKD.Ensemble_minsub_get, _EnsembleKD.Ensemble_minsub_set)
    __swig_setmethods__["thresh"] = _EnsembleKD.Ensemble_thresh_set
    __swig_getmethods__["thresh"] = _EnsembleKD.Ensemble_thresh_get
    if _newclass:
        thresh = _swig_property(_EnsembleKD.Ensemble_thresh_get, _EnsembleKD.Ensemble_thresh_set)
    __swig_setmethods__["continuous"] = _EnsembleKD.Ensemble_continuous_set
    __swig_getmethods__["continuous"] = _EnsembleKD.Ensemble_continuous_get
    if _newclass:
        continuous = _swig_property(_EnsembleKD.Ensemble_continuous_get, _EnsembleKD.Ensemble_continuous_set)
    __swig_setmethods__["key_pos"] = _EnsembleKD.Ensemble_key_pos_set
    __swig_getmethods__["key_pos"] = _EnsembleKD.Ensemble_key_pos_get
    if _newclass:
        key_pos = _swig_property(_EnsembleKD.Ensemble_key_pos_get, _EnsembleKD.Ensemble_key_pos_set)

    def __init__(self, *args):
        this = _EnsembleKD.new_Ensemble(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EnsembleKD.delete_Ensemble
    __del__ = lambda self: None

    def Reset(self, *args):
        return _EnsembleKD.Ensemble_Reset(self, *args)

    def setDimensions(self, si):
        return _EnsembleKD.Ensemble_setDimensions(self, si)

    def setContinuous(self):
        return _EnsembleKD.Ensemble_setContinuous(self)

    def setMaxRange(self):
        return _EnsembleKD.Ensemble_setMaxRange(self)

    def setNKeep(self, n):
        return _EnsembleKD.Ensemble_setNKeep(self, n)

    def Order(self, n):
        return _EnsembleKD.Ensemble_Order(self, n)

    def setVerboseOn(self):
        return _EnsembleKD.Ensemble_setVerboseOn(self)

    def setVerboseOff(self):
        return _EnsembleKD.Ensemble_setVerboseOff(self)

    def setVerboseDebugOn(self):
        return _EnsembleKD.Ensemble_setVerboseDebugOn(self)

    def setVerboseDebugOff(self):
        return _EnsembleKD.Ensemble_setVerboseDebugOff(self)

    def AccumData(self, *args):
        return _EnsembleKD.Ensemble_AccumData(self, *args)

    def AccumulateData(self, v, datapoint):
        return _EnsembleKD.Ensemble_AccumulateData(self, v, datapoint)

    def ComputeDistribution(self, *args):
        return _EnsembleKD.Ensemble_ComputeDistribution(self, *args)

    def stats(self, n, m, s):
        return _EnsembleKD.Ensemble_stats(self, n, m, s)

    def Nstates(self):
        return _EnsembleKD.Ensemble_Nstates(self)

    def Npopped(self):
        return _EnsembleKD.Ensemble_Npopped(self)

    def PDFSubspace(self, m):
        return _EnsembleKD.Ensemble_PDFSubspace(self, m)

    def getValidSubspaceMixtures(self):
        return _EnsembleKD.Ensemble_getValidSubspaceMixtures(self)

    def getStates(self):
        return _EnsembleKD.Ensemble_getStates(self)

    def getStateInfo(self):
        return _EnsembleKD.Ensemble_getStateInfo(self)

    def logPDF(self, p):
        return _EnsembleKD.Ensemble_logPDF(self, p)

    def logPDFMarginal(self, m, n, V):
        return _EnsembleKD.Ensemble_logPDFMarginal(self, m, n, V)

    def New(self):
        return _EnsembleKD.Ensemble_New(self)

    def StdDev(self, *args):
        return _EnsembleKD.Ensemble_StdDev(self, *args)

    def Mean(self, *args):
        return _EnsembleKD.Ensemble_Mean(self, *args)

    def Sample(self, *args):
        return _EnsembleKD.Ensemble_Sample(self, *args)

    def sampleSubspace(self):
        return _EnsembleKD.Ensemble_sampleSubspace(self)

    def Width(self, m):
        return _EnsembleKD.Ensemble_Width(self, m)

    def WidthVector(self, m):
        return _EnsembleKD.Ensemble_WidthVector(self, m)

    def printWidth(self, *args):
        return _EnsembleKD.Ensemble_printWidth(self, *args)

    def StdDevMarginal(self, m, n):
        return _EnsembleKD.Ensemble_StdDevMarginal(self, m, n)

    def MeanMarginal(self, m, n):
        return _EnsembleKD.Ensemble_MeanMarginal(self, m, n)

    def SampleMarginal(self, m, n):
        return _EnsembleKD.Ensemble_SampleMarginal(self, m, n)

    def WidthMarginal(self, m, n):
        return _EnsembleKD.Ensemble_WidthMarginal(self, m, n)

    def PrintDiag(self, *args):
        return _EnsembleKD.Ensemble_PrintDiag(self, *args)

    def Exists(self, m):
        return _EnsembleKD.Ensemble_Exists(self, m)

    def Broadcast(self):
        return _EnsembleKD.Ensemble_Broadcast(self)

    def enableDump(self):
        return _EnsembleKD.Ensemble_enableDump(self)

    def disableDump(self):
        return _EnsembleKD.Ensemble_disableDump(self)

    def binaryDump(self):
        return _EnsembleKD.Ensemble_binaryDump(self)

    def asciiDump(self):
        return _EnsembleKD.Ensemble_asciiDump(self)

    def statesToFile(self, filename, binary):
        return _EnsembleKD.Ensemble_statesToFile(self, filename, binary)

    def dumpStates(self, *args):
        return _EnsembleKD.Ensemble_dumpStates(self, *args)

    def PrintDensity(self, *args):
        return _EnsembleKD.Ensemble_PrintDensity(self, *args)

    def getMaxLikeState(self):
        return _EnsembleKD.Ensemble_getMaxLikeState(self)

    def getMaxProbState(self):
        return _EnsembleKD.Ensemble_getMaxProbState(self)
Ensemble_swigregister = _EnsembleKD.Ensemble_swigregister
Ensemble_swigregister(Ensemble)
cvar = _EnsembleKD.cvar

class EnsembleKD(Ensemble):
    __swig_setmethods__ = {}
    for _s in [Ensemble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnsembleKD, name, value)
    __swig_getmethods__ = {}
    for _s in [Ensemble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnsembleKD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ncut"] = _EnsembleKD.EnsembleKD_ncut_set
    __swig_getmethods__["ncut"] = _EnsembleKD.EnsembleKD_ncut_get
    if _newclass:
        ncut = _swig_property(_EnsembleKD.EnsembleKD_ncut_get, _EnsembleKD.EnsembleKD_ncut_set)
    __swig_setmethods__["minsub"] = _EnsembleKD.EnsembleKD_minsub_set
    __swig_getmethods__["minsub"] = _EnsembleKD.EnsembleKD_minsub_get
    if _newclass:
        minsub = _swig_property(_EnsembleKD.EnsembleKD_minsub_get, _EnsembleKD.EnsembleKD_minsub_set)

    def __init__(self, *args):
        this = _EnsembleKD.new_EnsembleKD(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EnsembleKD.delete_EnsembleKD
    __del__ = lambda self: None

    def Reset(self, *args):
        return _EnsembleKD.EnsembleKD_Reset(self, *args)

    def setBucketSize(self, n):
        return _EnsembleKD.EnsembleKD_setBucketSize(self, n)

    def ComputeDistribution(self, *args):
        return _EnsembleKD.EnsembleKD_ComputeDistribution(self, *args)

    def ComputeDistributionMarginal(self, out):
        return _EnsembleKD.EnsembleKD_ComputeDistributionMarginal(self, out)

    def New(self):
        return _EnsembleKD.EnsembleKD_New(self)

    def getDim(self):
        return _EnsembleKD.EnsembleKD_getDim(self)

    def PDF(self, arg2):
        return _EnsembleKD.EnsembleKD_PDF(self, arg2)

    def logPDF(self, arg2):
        return _EnsembleKD.EnsembleKD_logPDF(self, arg2)

    def logPDFMarginal(self, m, n, V):
        return _EnsembleKD.EnsembleKD_logPDFMarginal(self, m, n, V)

    def lower(self):
        return _EnsembleKD.EnsembleKD_lower(self)

    def upper(self):
        return _EnsembleKD.EnsembleKD_upper(self)

    def Mean(self, m):
        return _EnsembleKD.EnsembleKD_Mean(self, m)

    def StdDev(self, m):
        return _EnsembleKD.EnsembleKD_StdDev(self, m)

    def Moments(self, m, k):
        return _EnsembleKD.EnsembleKD_Moments(self, m, k)

    def Sample(self, m):
        return _EnsembleKD.EnsembleKD_Sample(self, m)

    def SampleMarginal(self, m, n):
        return _EnsembleKD.EnsembleKD_SampleMarginal(self, m, n)

    def SampleOne(self, m, j):
        return _EnsembleKD.EnsembleKD_SampleOne(self, m, j)

    def PrintDiag(self, *args):
        return _EnsembleKD.EnsembleKD_PrintDiag(self, *args)

    def PrintDensity(self, dim1, dim2, num1, num2, file):
        return _EnsembleKD.EnsembleKD_PrintDensity(self, dim1, dim2, num1, num2, file)
EnsembleKD_swigregister = _EnsembleKD.EnsembleKD_swigregister
EnsembleKD_swigregister(EnsembleKD)

# This file is compatible with both classic and new-style classes.


