# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLM', [dirname(__file__)])
        except ImportError:
            import _HLM
            return _HLM
        if fp is not None:
            try:
                _mod = imp.load_module('_HLM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _HLM = swig_import_helper()
    del swig_import_helper
else:
    import _HLM
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Serializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serializable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _HLM.new_Serializable()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _HLM.delete_Serializable
    __del__ = lambda self: None
Serializable_swigregister = _HLM.Serializable_swigregister
Serializable_swigregister(Serializable)

class Funct1d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Funct1d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Funct1d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def G(self, arg2):
        return _HLM.Funct1d_G(self, arg2)
    __swig_destroy__ = _HLM.delete_Funct1d
    __del__ = lambda self: None
Funct1d_swigregister = _HLM.Funct1d_swigregister
Funct1d_swigregister(Funct1d)

class LikelihoodFunction(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LikelihoodFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LikelihoodFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["threshval"] = _HLM.LikelihoodFunction_threshval_set
    __swig_getmethods__["threshval"] = _HLM.LikelihoodFunction_threshval_get
    if _newclass:
        threshval = _swig_property(_HLM.LikelihoodFunction_threshval_get, _HLM.LikelihoodFunction_threshval_set)

    def CumuProb(self, z, sd, norm, t, s, indx, f):
        return _HLM.LikelihoodFunction_CumuProb(self, z, sd, norm, t, s, indx, f)

    def LikeProb(self, *args):
        return _HLM.LikelihoodFunction_LikeProb(self, *args)

    def ParameterDescription(self, i):
        return _HLM.LikelihoodFunction_ParameterDescription(self, i)
    __swig_destroy__ = _HLM.delete_LikelihoodFunction
    __del__ = lambda self: None
LikelihoodFunction_swigregister = _HLM.LikelihoodFunction_swigregister
LikelihoodFunction_swigregister(LikelihoodFunction)
cvar = _HLM.cvar

class elemHLM(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, elemHLM, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, elemHLM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["drug"] = _HLM.elemHLM_drug_set
    __swig_getmethods__["drug"] = _HLM.elemHLM_drug_get
    if _newclass:
        drug = _swig_property(_HLM.elemHLM_drug_get, _HLM.elemHLM_drug_set)
    __swig_setmethods__["AIDS"] = _HLM.elemHLM_AIDS_set
    __swig_getmethods__["AIDS"] = _HLM.elemHLM_AIDS_get
    if _newclass:
        AIDS = _swig_property(_HLM.elemHLM_AIDS_get, _HLM.elemHLM_AIDS_set)
    __swig_setmethods__["numb"] = _HLM.elemHLM_numb_set
    __swig_getmethods__["numb"] = _HLM.elemHLM_numb_get
    if _newclass:
        numb = _swig_property(_HLM.elemHLM_numb_get, _HLM.elemHLM_numb_set)
    __swig_setmethods__["time"] = _HLM.elemHLM_time_set
    __swig_getmethods__["time"] = _HLM.elemHLM_time_get
    if _newclass:
        time = _swig_property(_HLM.elemHLM_time_get, _HLM.elemHLM_time_set)
    __swig_setmethods__["indx"] = _HLM.elemHLM_indx_set
    __swig_getmethods__["indx"] = _HLM.elemHLM_indx_get
    if _newclass:
        indx = _swig_property(_HLM.elemHLM_indx_get, _HLM.elemHLM_indx_set)

    def __init__(self):
        this = _HLM.new_elemHLM()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _HLM.delete_elemHLM
    __del__ = lambda self: None
elemHLM_swigregister = _HLM.elemHLM_swigregister
elemHLM_swigregister(elemHLM)

class HLM(LikelihoodFunction):
    __swig_setmethods__ = {}
    for _s in [LikelihoodFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLM, name, value)
    __swig_getmethods__ = {}
    for _s in [LikelihoodFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLM, name)
    __repr__ = _swig_repr

    def __init__(self, data, M=1):
        this = _HLM.new_HLM(data, M)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def LikeProb(self, z, sd, norm, t, s, indx):
        return _HLM.HLM_LikeProb(self, z, sd, norm, t, s, indx)

    def fixedDim(self):
        return _HLM.HLM_fixedDim(self)

    def subjectDim(self):
        return _HLM.HLM_subjectDim(self)

    def Dim(self):
        return _HLM.HLM_Dim(self)

    def ParameterDescription(self, i):
        return _HLM.HLM_ParameterDescription(self, i)
    __swig_destroy__ = _HLM.delete_HLM
    __del__ = lambda self: None
HLM_swigregister = _HLM.HLM_swigregister
HLM_swigregister(HLM)

# This file is compatible with both classic and new-style classes.


