# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Frontier', [dirname(__file__)])
        except ImportError:
            import _Frontier
            return _Frontier
        if fp is not None:
            try:
                _mod = imp.load_module('_Frontier', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Frontier = swig_import_helper()
    del swig_import_helper
else:
    import _Frontier
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Serializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serializable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Frontier.new_Serializable()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Frontier.delete_Serializable
    __del__ = lambda self: None
Serializable_swigregister = _Frontier.Serializable_swigregister
Serializable_swigregister(Serializable)

class Frontier(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Frontier, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Frontier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Frontier.new_Frontier(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Copy(self):
        return _Frontier.Frontier_Copy(self)
    __swig_destroy__ = _Frontier.delete_Frontier
    __del__ = lambda self: None

    def getTessellation(self):
        return _Frontier.Frontier_getTessellation(self)

    def ExportFrontier(self):
        return _Frontier.Frontier_ExportFrontier(self)

    def RetractToTopLevel(self):
        return _Frontier.Frontier_RetractToTopLevel(self)

    def UpDownLevels(self, n):
        return _Frontier.Frontier_UpDownLevels(self, n)

    def Set(self, FrontierState):
        return _Frontier.Frontier_Set(self, FrontierState)

    def IncreaseResolution(self, heuristic, numlevels=1):
        return _Frontier.Frontier_IncreaseResolution(self, heuristic, numlevels)

    def Find(self, x, y):
        return _Frontier.Frontier_Find(self, x, y)

    def First(self):
        return _Frontier.Frontier_First(self)

    def Last(self):
        return _Frontier.Frontier_Last(self)

    def Next(self):
        return _Frontier.Frontier_Next(self)

    def CurrentItem(self):
        return _Frontier.Frontier_CurrentItem(self)

    def Reset(self):
        return _Frontier.Frontier_Reset(self)

    def IsDone(self):
        return _Frontier.Frontier_IsDone(self)

    def Size(self):
        return _Frontier.Frontier_Size(self)

    def printSize(self):
        return _Frontier.Frontier_printSize(self)

    def AccumulateMode(self):
        return _Frontier.Frontier_AccumulateMode(self)
Frontier_swigregister = _Frontier.Frontier_swigregister
Frontier_swigregister(Frontier)

# This file is compatible with both classic and new-style classes.


