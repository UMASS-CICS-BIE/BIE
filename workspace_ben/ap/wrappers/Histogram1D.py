# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Histogram1D', [dirname(__file__)])
        except ImportError:
            import _Histogram1D
            return _Histogram1D
        if fp is not None:
            try:
                _mod = imp.load_module('_Histogram1D', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Histogram1D = swig_import_helper()
    del swig_import_helper
else:
    import _Histogram1D
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Serializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serializable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Histogram1D.new_Serializable()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Histogram1D.delete_Serializable
    __del__ = lambda self: None
Serializable_swigregister = _Histogram1D.Serializable_swigregister
Serializable_swigregister(Serializable)


_Histogram1D.SampleStatistic_h_swigconstant(_Histogram1D)
SampleStatistic_h = _Histogram1D.SampleStatistic_h
class SampleStatistic(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleStatistic, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleStatistic, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Histogram1D.new_SampleStatistic()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Histogram1D.delete_SampleStatistic
    __del__ = lambda self: None

    def reset(self):
        return _Histogram1D.SampleStatistic_reset(self)

    def __iadd__(self, arg2):
        return _Histogram1D.SampleStatistic___iadd__(self, arg2)

    def samples(self):
        return _Histogram1D.SampleStatistic_samples(self)

    def mean(self):
        return _Histogram1D.SampleStatistic_mean(self)

    def stdDev(self):
        return _Histogram1D.SampleStatistic_stdDev(self)

    def var(self):
        return _Histogram1D.SampleStatistic_var(self)

    def min(self):
        return _Histogram1D.SampleStatistic_min(self)

    def max(self):
        return _Histogram1D.SampleStatistic_max(self)

    def confidence(self, *args):
        return _Histogram1D.SampleStatistic_confidence(self, *args)

    def error(self, msg):
        return _Histogram1D.SampleStatistic_error(self, msg)
SampleStatistic_swigregister = _Histogram1D.SampleStatistic_swigregister
SampleStatistic_swigregister(SampleStatistic)


def default_SampleStatistic_error_handler(arg1):
    return _Histogram1D.default_SampleStatistic_error_handler(arg1)
default_SampleStatistic_error_handler = _Histogram1D.default_SampleStatistic_error_handler

def set_SampleStatistic_error_handler(f):
    return _Histogram1D.set_SampleStatistic_error_handler(f)
set_SampleStatistic_error_handler = _Histogram1D.set_SampleStatistic_error_handler

_Histogram1D.SampleHistogram_h_swigconstant(_Histogram1D)
SampleHistogram_h = _Histogram1D.SampleHistogram_h
class SampleHistogram(SampleStatistic):
    __swig_setmethods__ = {}
    for _s in [SampleStatistic]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleHistogram, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleStatistic]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleHistogram, name)
    __repr__ = _swig_repr

    def __init__(self, low, hi, bucketWidth=-1.0):
        this = _Histogram1D.new_SampleHistogram(low, hi, bucketWidth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Histogram1D.delete_SampleHistogram
    __del__ = lambda self: None

    def reset(self):
        return _Histogram1D.SampleHistogram_reset(self)

    def __iadd__(self, arg2):
        return _Histogram1D.SampleHistogram___iadd__(self, arg2)

    def similarSamples(self, arg2):
        return _Histogram1D.SampleHistogram_similarSamples(self, arg2)

    def buckets(self):
        return _Histogram1D.SampleHistogram_buckets(self)

    def bucketThreshold(self, i):
        return _Histogram1D.SampleHistogram_bucketThreshold(self, i)

    def inBucket(self, i):
        return _Histogram1D.SampleHistogram_inBucket(self, i)

    def printBuckets(self, arg2):
        return _Histogram1D.SampleHistogram_printBuckets(self, arg2)
SampleHistogram_swigregister = _Histogram1D.SampleHistogram_swigregister
SampleHistogram_swigregister(SampleHistogram)
cvar = _Histogram1D.cvar
SampleHistogramMinimum = cvar.SampleHistogramMinimum
SampleHistogramMaximum = cvar.SampleHistogramMaximum

class Distribution(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Distribution, name)
    __repr__ = _swig_repr
    UniformAdd = _Histogram1D.Distribution_UniformAdd
    UniformMult = _Histogram1D.Distribution_UniformMult
    NormalAdd = _Histogram1D.Distribution_NormalAdd
    NormalMult = _Histogram1D.Distribution_NormalMult
    Undefined = _Histogram1D.Distribution_Undefined

    def __init__(self):
        this = _Histogram1D.new_Distribution()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Histogram1D.delete_Distribution
    __del__ = lambda self: None

    def New(self):
        return _Histogram1D.Distribution_New(self)

    def PDF(self, arg2):
        return _Histogram1D.Distribution_PDF(self, arg2)

    def logPDF(self, arg2):
        return _Histogram1D.Distribution_logPDF(self, arg2)

    def CDF(self, arg2):
        return _Histogram1D.Distribution_CDF(self, arg2)

    def lower(self):
        return _Histogram1D.Distribution_lower(self)

    def upper(self):
        return _Histogram1D.Distribution_upper(self)

    def Mean(self):
        return _Histogram1D.Distribution_Mean(self)

    def StdDev(self):
        return _Histogram1D.Distribution_StdDev(self)

    def Moments(self, arg2):
        return _Histogram1D.Distribution_Moments(self, arg2)

    def Sample(self):
        return _Histogram1D.Distribution_Sample(self)

    def setWidth(self, x):
        return _Histogram1D.Distribution_setWidth(self, x)

    def Type(self):
        return _Histogram1D.Distribution_Type(self)

    def Dim(self):
        return _Histogram1D.Distribution_Dim(self)
Distribution_swigregister = _Histogram1D.Distribution_swigregister
Distribution_swigregister(Distribution)

class SampleDistribution(Distribution):
    __swig_setmethods__ = {}
    for _s in [Distribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Distribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleDistribution, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Histogram1D.delete_SampleDistribution
    __del__ = lambda self: None

    def CDF(self, arg2):
        return _Histogram1D.SampleDistribution_CDF(self, arg2)

    def New(self):
        return _Histogram1D.SampleDistribution_New(self)

    def AccumData(self, *args):
        return _Histogram1D.SampleDistribution_AccumData(self, *args)

    def ComputeDistribution(self):
        return _Histogram1D.SampleDistribution_ComputeDistribution(self)

    def numberData(self):
        return _Histogram1D.SampleDistribution_numberData(self)

    def getValue(self, i):
        return _Histogram1D.SampleDistribution_getValue(self, i)

    def getdim(self, i):
        return _Histogram1D.SampleDistribution_getdim(self, i)

    def getRecordType(self):
        return _Histogram1D.SampleDistribution_getRecordType(self)

    def getDataSetSize(self):
        return _Histogram1D.SampleDistribution_getDataSetSize(self)
SampleDistribution_swigregister = _Histogram1D.SampleDistribution_swigregister
SampleDistribution_swigregister(SampleDistribution)

class BinnedDistribution(SampleDistribution):
    __swig_setmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinnedDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinnedDistribution, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Histogram1D.delete_BinnedDistribution
    __del__ = lambda self: None

    def New(self):
        return _Histogram1D.BinnedDistribution_New(self)

    def getLow(self, i):
        return _Histogram1D.BinnedDistribution_getLow(self, i)

    def getHigh(self, i):
        return _Histogram1D.BinnedDistribution_getHigh(self, i)

    def CDF(self, arg2):
        return _Histogram1D.BinnedDistribution_CDF(self, arg2)
BinnedDistribution_swigregister = _Histogram1D.BinnedDistribution_swigregister
BinnedDistribution_swigregister(BinnedDistribution)

class PointDistribution(SampleDistribution):
    __swig_setmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Histogram1D.new_PointDistribution(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Histogram1D.delete_PointDistribution
    __del__ = lambda self: None

    def New(self):
        return _Histogram1D.PointDistribution_New(self)

    def getRecordType(self):
        return _Histogram1D.PointDistribution_getRecordType(self)

    def AccumData(self, v, datapoint):
        return _Histogram1D.PointDistribution_AccumData(self, v, datapoint)

    def getdim(self, i):
        return _Histogram1D.PointDistribution_getdim(self, i)

    def numberData(self):
        return _Histogram1D.PointDistribution_numberData(self)

    def getValue(self, i):
        return _Histogram1D.PointDistribution_getValue(self, i)

    def Point(self):
        return _Histogram1D.PointDistribution_Point(self)

    def CDF(self, v):
        return _Histogram1D.PointDistribution_CDF(self, v)
PointDistribution_swigregister = _Histogram1D.PointDistribution_swigregister
PointDistribution_swigregister(PointDistribution)

class NullDistribution(SampleDistribution):
    __swig_setmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleDistribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullDistribution, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Histogram1D.new_NullDistribution()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Histogram1D.delete_NullDistribution
    __del__ = lambda self: None

    def New(self):
        return _Histogram1D.NullDistribution_New(self)
NullDistribution_swigregister = _Histogram1D.NullDistribution_swigregister
NullDistribution_swigregister(NullDistribution)

class Bin(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bin, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Histogram1D.new_Bin()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["bot"] = _Histogram1D.Bin_bot_set
    __swig_getmethods__["bot"] = _Histogram1D.Bin_bot_get
    if _newclass:
        bot = _swig_property(_Histogram1D.Bin_bot_get, _Histogram1D.Bin_bot_set)
    __swig_setmethods__["center"] = _Histogram1D.Bin_center_set
    __swig_getmethods__["center"] = _Histogram1D.Bin_center_get
    if _newclass:
        center = _swig_property(_Histogram1D.Bin_center_get, _Histogram1D.Bin_center_set)
    __swig_setmethods__["top"] = _Histogram1D.Bin_top_set
    __swig_getmethods__["top"] = _Histogram1D.Bin_top_get
    if _newclass:
        top = _swig_property(_Histogram1D.Bin_top_get, _Histogram1D.Bin_top_set)
    __swig_setmethods__["val"] = _Histogram1D.Bin_val_set
    __swig_getmethods__["val"] = _Histogram1D.Bin_val_get
    if _newclass:
        val = _swig_property(_Histogram1D.Bin_val_get, _Histogram1D.Bin_val_set)

    def __lt__(self, x):
        return _Histogram1D.Bin___lt__(self, x)
    __swig_destroy__ = _Histogram1D.delete_Bin
    __del__ = lambda self: None
Bin_swigregister = _Histogram1D.Bin_swigregister
Bin_swigregister(Bin)

class CumSampleHistogram(SampleHistogram):
    __swig_setmethods__ = {}
    for _s in [SampleHistogram]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumSampleHistogram, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleHistogram]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CumSampleHistogram, name)
    __repr__ = _swig_repr

    def __init__(self, low, hi, bucketWidth=-1.0):
        this = _Histogram1D.new_CumSampleHistogram(low, hi, bucketWidth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def quartile(self, s):
        return _Histogram1D.CumSampleHistogram_quartile(self, s)

    def fraction(self, s):
        return _Histogram1D.CumSampleHistogram_fraction(self, s)
    __swig_destroy__ = _Histogram1D.delete_CumSampleHistogram
    __del__ = lambda self: None
CumSampleHistogram_swigregister = _Histogram1D.CumSampleHistogram_swigregister
CumSampleHistogram_swigregister(CumSampleHistogram)

class Histogram1D(BinnedDistribution):
    __swig_setmethods__ = {}
    for _s in [BinnedDistribution]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinnedDistribution]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Histogram1D.new_Histogram1D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Histogram1D.delete_Histogram1D
    __del__ = lambda self: None

    def New(self):
        return _Histogram1D.Histogram1D_New(self)

    def PDF(self, x):
        return _Histogram1D.Histogram1D_PDF(self, x)

    def logPDF(self, x):
        return _Histogram1D.Histogram1D_logPDF(self, x)

    def CDF(self, x):
        return _Histogram1D.Histogram1D_CDF(self, x)

    def lower(self):
        return _Histogram1D.Histogram1D_lower(self)

    def upper(self):
        return _Histogram1D.Histogram1D_upper(self)

    def Mean(self):
        return _Histogram1D.Histogram1D_Mean(self)

    def StdDev(self):
        return _Histogram1D.Histogram1D_StdDev(self)

    def Moments(self, i):
        return _Histogram1D.Histogram1D_Moments(self, i)

    def Sample(self):
        return _Histogram1D.Histogram1D_Sample(self)

    def ComputeDistribution(self):
        return _Histogram1D.Histogram1D_ComputeDistribution(self)

    def numberData(self):
        return _Histogram1D.Histogram1D_numberData(self)

    def getValue(self, i):
        return _Histogram1D.Histogram1D_getValue(self, i)

    def getLow(self, i):
        return _Histogram1D.Histogram1D_getLow(self, i)

    def getHigh(self, i):
        return _Histogram1D.Histogram1D_getHigh(self, i)

    def getdim(self, i):
        return _Histogram1D.Histogram1D_getdim(self, i)
Histogram1D_swigregister = _Histogram1D.Histogram1D_swigregister
Histogram1D_swigregister(Histogram1D)

# This file is compatible with both classic and new-style classes.


