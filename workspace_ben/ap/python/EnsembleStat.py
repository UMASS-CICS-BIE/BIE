# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EnsembleStat', [dirname(__file__)])
        except ImportError:
            import _EnsembleStat
            return _EnsembleStat
        if fp is not None:
            try:
                _mod = imp.load_module('_EnsembleStat', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EnsembleStat = swig_import_helper()
    del swig_import_helper
else:
    import _EnsembleStat
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class EnsembleStat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnsembleStat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnsembleStat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minsub"] = _EnsembleStat.EnsembleStat_minsub_set
    __swig_getmethods__["minsub"] = _EnsembleStat.EnsembleStat_minsub_get
    if _newclass:
        minsub = _swig_property(_EnsembleStat.EnsembleStat_minsub_get, _EnsembleStat.EnsembleStat_minsub_set)

    def __init__(self, *args):
        this = _EnsembleStat.new_EnsembleStat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EnsembleStat.delete_EnsembleStat
    __del__ = lambda self: None

    def Reset(self, *args):
        return _EnsembleStat.EnsembleStat_Reset(self, *args)

    def setDimensions(self, si):
        return _EnsembleStat.EnsembleStat_setDimensions(self, si)
    __swig_setmethods__["covar"] = _EnsembleStat.EnsembleStat_covar_set
    __swig_getmethods__["covar"] = _EnsembleStat.EnsembleStat_covar_get
    if _newclass:
        covar = _swig_property(_EnsembleStat.EnsembleStat_covar_get, _EnsembleStat.EnsembleStat_covar_set)
    __swig_setmethods__["covarM"] = _EnsembleStat.EnsembleStat_covarM_set
    __swig_getmethods__["covarM"] = _EnsembleStat.EnsembleStat_covarM_get
    if _newclass:
        covarM = _swig_property(_EnsembleStat.EnsembleStat_covarM_get, _EnsembleStat.EnsembleStat_covarM_set)
    __swig_setmethods__["Teigen"] = _EnsembleStat.EnsembleStat_Teigen_set
    __swig_getmethods__["Teigen"] = _EnsembleStat.EnsembleStat_Teigen_get
    if _newclass:
        Teigen = _swig_property(_EnsembleStat.EnsembleStat_Teigen_get, _EnsembleStat.EnsembleStat_Teigen_set)
    __swig_setmethods__["TeigeM"] = _EnsembleStat.EnsembleStat_TeigeM_set
    __swig_getmethods__["TeigeM"] = _EnsembleStat.EnsembleStat_TeigeM_get
    if _newclass:
        TeigeM = _swig_property(_EnsembleStat.EnsembleStat_TeigeM_get, _EnsembleStat.EnsembleStat_TeigeM_set)
    __swig_setmethods__["eigen"] = _EnsembleStat.EnsembleStat_eigen_set
    __swig_getmethods__["eigen"] = _EnsembleStat.EnsembleStat_eigen_get
    if _newclass:
        eigen = _swig_property(_EnsembleStat.EnsembleStat_eigen_get, _EnsembleStat.EnsembleStat_eigen_set)
    __swig_setmethods__["eigenM"] = _EnsembleStat.EnsembleStat_eigenM_set
    __swig_getmethods__["eigenM"] = _EnsembleStat.EnsembleStat_eigenM_get
    if _newclass:
        eigenM = _swig_property(_EnsembleStat.EnsembleStat_eigenM_get, _EnsembleStat.EnsembleStat_eigenM_set)
    __swig_setmethods__["mean"] = _EnsembleStat.EnsembleStat_mean_set
    __swig_getmethods__["mean"] = _EnsembleStat.EnsembleStat_mean_get
    if _newclass:
        mean = _swig_property(_EnsembleStat.EnsembleStat_mean_get, _EnsembleStat.EnsembleStat_mean_set)
    __swig_setmethods__["meanM"] = _EnsembleStat.EnsembleStat_meanM_set
    __swig_getmethods__["meanM"] = _EnsembleStat.EnsembleStat_meanM_get
    if _newclass:
        meanM = _swig_property(_EnsembleStat.EnsembleStat_meanM_get, _EnsembleStat.EnsembleStat_meanM_set)
    __swig_setmethods__["evals"] = _EnsembleStat.EnsembleStat_evals_set
    __swig_getmethods__["evals"] = _EnsembleStat.EnsembleStat_evals_get
    if _newclass:
        evals = _swig_property(_EnsembleStat.EnsembleStat_evals_get, _EnsembleStat.EnsembleStat_evals_set)
    __swig_setmethods__["evalsM"] = _EnsembleStat.EnsembleStat_evalsM_set
    __swig_getmethods__["evalsM"] = _EnsembleStat.EnsembleStat_evalsM_get
    if _newclass:
        evalsM = _swig_property(_EnsembleStat.EnsembleStat_evalsM_get, _EnsembleStat.EnsembleStat_evalsM_set)

    def ComputeDistribution(self, *args):
        return _EnsembleStat.EnsembleStat_ComputeDistribution(self, *args)

    def ComputeDistributionMarginal(self, out):
        return _EnsembleStat.EnsembleStat_ComputeDistributionMarginal(self, out)

    def trim_location(self, m):
        return _EnsembleStat.EnsembleStat_trim_location(self, m)

    def trim_location_marginal(self, m, n):
        return _EnsembleStat.EnsembleStat_trim_location_marginal(self, m, n)

    def New(self):
        return _EnsembleStat.EnsembleStat_New(self)

    def logPDF(self, arg2):
        return _EnsembleStat.EnsembleStat_logPDF(self, arg2)

    def logPDFMarginal(self, m, n, V):
        return _EnsembleStat.EnsembleStat_logPDFMarginal(self, m, n, V)

    def PDF(self, *args):
        return _EnsembleStat.EnsembleStat_PDF(self, *args)

    def lower(self):
        return _EnsembleStat.EnsembleStat_lower(self)

    def upper(self):
        return _EnsembleStat.EnsembleStat_upper(self)

    def Mean(self, m):
        return _EnsembleStat.EnsembleStat_Mean(self, m)

    def StdDev(self, m):
        return _EnsembleStat.EnsembleStat_StdDev(self, m)

    def Moments(self, m, k):
        return _EnsembleStat.EnsembleStat_Moments(self, m, k)

    def Sample(self, m):
        return _EnsembleStat.EnsembleStat_Sample(self, m)

    def SampleOne(self, m, j):
        return _EnsembleStat.EnsembleStat_SampleOne(self, m, j)

    def StdDevMarginal(self, m, n):
        return _EnsembleStat.EnsembleStat_StdDevMarginal(self, m, n)

    def MeanMarginal(self, m, n):
        return _EnsembleStat.EnsembleStat_MeanMarginal(self, m, n)

    def SampleMarginal(self, m, n):
        return _EnsembleStat.EnsembleStat_SampleMarginal(self, m, n)

    def WidthMarginal(self, m, n):
        return _EnsembleStat.EnsembleStat_WidthMarginal(self, m, n)

    def PrintDiag(self, *args):
        return _EnsembleStat.EnsembleStat_PrintDiag(self, *args)

    def PrintDensity(self, dim1, dim2, num1, num2, file):
        return _EnsembleStat.EnsembleStat_PrintDensity(self, dim1, dim2, num1, num2, file)
EnsembleStat_swigregister = _EnsembleStat.EnsembleStat_swigregister
EnsembleStat_swigregister(EnsembleStat)
cvar = _EnsembleStat.cvar

# This file is compatible with both classic and new-style classes.


