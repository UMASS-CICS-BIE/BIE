# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GaussTestMultiD', [dirname(__file__)])
        except ImportError:
            import _GaussTestMultiD
            return _GaussTestMultiD
        if fp is not None:
            try:
                _mod = imp.load_module('_GaussTestMultiD', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _GaussTestMultiD = swig_import_helper()
    del swig_import_helper
else:
    import _GaussTestMultiD
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class GaussTestMultiD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussTestMultiD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussTestMultiD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["useAnalytic"] = _GaussTestMultiD.GaussTestMultiD_useAnalytic_set
    __swig_getmethods__["useAnalytic"] = _GaussTestMultiD.GaussTestMultiD_useAnalytic_get
    if _newclass:
        useAnalytic = _swig_property(_GaussTestMultiD.GaussTestMultiD_useAnalytic_get, _GaussTestMultiD.GaussTestMultiD_useAnalytic_set)
    __swig_setmethods__["cdfSamples"] = _GaussTestMultiD.GaussTestMultiD_cdfSamples_set
    __swig_getmethods__["cdfSamples"] = _GaussTestMultiD.GaussTestMultiD_cdfSamples_get
    if _newclass:
        cdfSamples = _swig_property(_GaussTestMultiD.GaussTestMultiD_cdfSamples_get, _GaussTestMultiD.GaussTestMultiD_cdfSamples_set)
    __swig_setmethods__["ncut"] = _GaussTestMultiD.GaussTestMultiD_ncut_set
    __swig_getmethods__["ncut"] = _GaussTestMultiD.GaussTestMultiD_ncut_get
    if _newclass:
        ncut = _swig_property(_GaussTestMultiD.GaussTestMultiD_ncut_get, _GaussTestMultiD.GaussTestMultiD_ncut_set)

    def __init__(self, *args):
        this = _GaussTestMultiD.new_GaussTestMultiD(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def SetDim(self, n):
        return _GaussTestMultiD.GaussTestMultiD_SetDim(self, n)

    def dumpData(self, s):
        return _GaussTestMultiD.GaussTestMultiD_dumpData(self, s)

    def readData(self, s):
        return _GaussTestMultiD.GaussTestMultiD_readData(self, s)

    def printData(self):
        return _GaussTestMultiD.GaussTestMultiD_printData(self)

    def newModel(self, var0):
        return _GaussTestMultiD.GaussTestMultiD_newModel(self, var0)

    def Analytic(self):
        return _GaussTestMultiD.GaussTestMultiD_Analytic(self)

    def Gaussian(self):
        return _GaussTestMultiD.GaussTestMultiD_Gaussian(self)

    def BetaR(self, alpha):
        return _GaussTestMultiD.GaussTestMultiD_BetaR(self, alpha)

    def VarBetaR(self):
        return _GaussTestMultiD.GaussTestMultiD_VarBetaR(self)

    def setSamples(self, val, cut):
        return _GaussTestMultiD.GaussTestMultiD_setSamples(self, val, cut)

    def LikeProb(self, z, sd, norm, t, s, indx):
        return _GaussTestMultiD.GaussTestMultiD_LikeProb(self, z, sd, norm, t, s, indx)

    def CumuProb(self, z, sd, norm, t, s, indx, f):
        return _GaussTestMultiD.GaussTestMultiD_CumuProb(self, z, sd, norm, t, s, indx, f)

    def ParameterDescription(self, i):
        return _GaussTestMultiD.GaussTestMultiD_ParameterDescription(self, i)
    __swig_destroy__ = _GaussTestMultiD.delete_GaussTestMultiD
    __del__ = lambda self: None
GaussTestMultiD_swigregister = _GaussTestMultiD.GaussTestMultiD_swigregister
GaussTestMultiD_swigregister(GaussTestMultiD)
cvar = _GaussTestMultiD.cvar

# This file is compatible with both classic and new-style classes.


