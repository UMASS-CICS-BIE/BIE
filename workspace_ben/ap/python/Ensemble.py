# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Ensemble', [dirname(__file__)])
        except ImportError:
            import _Ensemble
            return _Ensemble
        if fp is not None:
            try:
                _mod = imp.load_module('_Ensemble', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Ensemble = swig_import_helper()
    del swig_import_helper
else:
    import _Ensemble
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class StateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prob"] = _Ensemble.StateData_prob_set
    __swig_getmethods__["prob"] = _Ensemble.StateData_prob_get
    if _newclass:
        prob = _swig_property(_Ensemble.StateData_prob_get, _Ensemble.StateData_prob_set)
    __swig_setmethods__["p"] = _Ensemble.StateData_p_set
    __swig_getmethods__["p"] = _Ensemble.StateData_p_get
    if _newclass:
        p = _swig_property(_Ensemble.StateData_p_get, _Ensemble.StateData_p_set)

    def __init__(self, *args):
        this = _Ensemble.new_StateData(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Broadcast(self):
        return _Ensemble.StateData_Broadcast(self)
    __swig_destroy__ = _Ensemble.delete_StateData
    __del__ = lambda self: None
StateData_swigregister = _Ensemble.StateData_swigregister
StateData_swigregister(StateData)

class PairIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIndex, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Ensemble.new_PairIndex()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["index"] = _Ensemble.PairIndex_index_set
    __swig_getmethods__["index"] = _Ensemble.PairIndex_index_get
    if _newclass:
        index = _swig_property(_Ensemble.PairIndex_index_get, _Ensemble.PairIndex_index_set)
    __swig_setmethods__["value"] = _Ensemble.PairIndex_value_set
    __swig_getmethods__["value"] = _Ensemble.PairIndex_value_get
    if _newclass:
        value = _swig_property(_Ensemble.PairIndex_value_get, _Ensemble.PairIndex_value_set)

    def __eq__(self, t):
        return _Ensemble.PairIndex___eq__(self, t)
    __swig_destroy__ = _Ensemble.delete_PairIndex
    __del__ = lambda self: None
PairIndex_swigregister = _Ensemble.PairIndex_swigregister
PairIndex_swigregister(PairIndex)

class StateCache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateCache, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Ensemble.new_StateCache(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Ensemble.delete_StateCache
    __del__ = lambda self: None

    def Mean(self, m):
        return _Ensemble.StateCache_Mean(self, m)

    def Sample(self, m):
        return _Ensemble.StateCache_Sample(self, m)

    def logPDF(self, P):
        return _Ensemble.StateCache_logPDF(self, P)

    def size(self):
        return _Ensemble.StateCache_size(self)

    def stateSize(self):
        return _Ensemble.StateCache_stateSize(self)
StateCache_swigregister = _Ensemble.StateCache_swigregister
StateCache_swigregister(StateCache)

class Ensemble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ensemble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ensemble, name)
    __repr__ = _swig_repr
    __swig_setmethods__["verbose_debug"] = _Ensemble.Ensemble_verbose_debug_set
    __swig_getmethods__["verbose_debug"] = _Ensemble.Ensemble_verbose_debug_get
    if _newclass:
        verbose_debug = _swig_property(_Ensemble.Ensemble_verbose_debug_get, _Ensemble.Ensemble_verbose_debug_set)
    __swig_setmethods__["verbose_default"] = _Ensemble.Ensemble_verbose_default_set
    __swig_getmethods__["verbose_default"] = _Ensemble.Ensemble_verbose_default_get
    if _newclass:
        verbose_default = _swig_property(_Ensemble.Ensemble_verbose_default_get, _Ensemble.Ensemble_verbose_default_set)
    __swig_setmethods__["keep"] = _Ensemble.Ensemble_keep_set
    __swig_getmethods__["keep"] = _Ensemble.Ensemble_keep_get
    if _newclass:
        keep = _swig_property(_Ensemble.Ensemble_keep_get, _Ensemble.Ensemble_keep_set)
    __swig_setmethods__["minsub"] = _Ensemble.Ensemble_minsub_set
    __swig_getmethods__["minsub"] = _Ensemble.Ensemble_minsub_get
    if _newclass:
        minsub = _swig_property(_Ensemble.Ensemble_minsub_get, _Ensemble.Ensemble_minsub_set)
    __swig_setmethods__["thresh"] = _Ensemble.Ensemble_thresh_set
    __swig_getmethods__["thresh"] = _Ensemble.Ensemble_thresh_get
    if _newclass:
        thresh = _swig_property(_Ensemble.Ensemble_thresh_get, _Ensemble.Ensemble_thresh_set)
    __swig_setmethods__["continuous"] = _Ensemble.Ensemble_continuous_set
    __swig_getmethods__["continuous"] = _Ensemble.Ensemble_continuous_get
    if _newclass:
        continuous = _swig_property(_Ensemble.Ensemble_continuous_get, _Ensemble.Ensemble_continuous_set)
    __swig_setmethods__["key_pos"] = _Ensemble.Ensemble_key_pos_set
    __swig_getmethods__["key_pos"] = _Ensemble.Ensemble_key_pos_get
    if _newclass:
        key_pos = _swig_property(_Ensemble.Ensemble_key_pos_get, _Ensemble.Ensemble_key_pos_set)

    def __init__(self, *args):
        this = _Ensemble.new_Ensemble(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Ensemble.delete_Ensemble
    __del__ = lambda self: None

    def Reset(self, *args):
        return _Ensemble.Ensemble_Reset(self, *args)

    def setDimensions(self, si):
        return _Ensemble.Ensemble_setDimensions(self, si)

    def setContinuous(self):
        return _Ensemble.Ensemble_setContinuous(self)

    def setMaxRange(self):
        return _Ensemble.Ensemble_setMaxRange(self)

    def setNKeep(self, n):
        return _Ensemble.Ensemble_setNKeep(self, n)

    def Order(self, n):
        return _Ensemble.Ensemble_Order(self, n)

    def setVerboseOn(self):
        return _Ensemble.Ensemble_setVerboseOn(self)

    def setVerboseOff(self):
        return _Ensemble.Ensemble_setVerboseOff(self)

    def setVerboseDebugOn(self):
        return _Ensemble.Ensemble_setVerboseDebugOn(self)

    def setVerboseDebugOff(self):
        return _Ensemble.Ensemble_setVerboseDebugOff(self)

    def AccumData(self, *args):
        return _Ensemble.Ensemble_AccumData(self, *args)

    def AccumulateData(self, v, datapoint):
        return _Ensemble.Ensemble_AccumulateData(self, v, datapoint)

    def ComputeDistribution(self, *args):
        return _Ensemble.Ensemble_ComputeDistribution(self, *args)

    def stats(self, n, m, s):
        return _Ensemble.Ensemble_stats(self, n, m, s)

    def Nstates(self):
        return _Ensemble.Ensemble_Nstates(self)

    def Npopped(self):
        return _Ensemble.Ensemble_Npopped(self)

    def PDFSubspace(self, m):
        return _Ensemble.Ensemble_PDFSubspace(self, m)

    def getValidSubspaceMixtures(self):
        return _Ensemble.Ensemble_getValidSubspaceMixtures(self)

    def getStates(self):
        return _Ensemble.Ensemble_getStates(self)

    def getStateInfo(self):
        return _Ensemble.Ensemble_getStateInfo(self)

    def logPDF(self, p):
        return _Ensemble.Ensemble_logPDF(self, p)

    def logPDFMarginal(self, m, n, V):
        return _Ensemble.Ensemble_logPDFMarginal(self, m, n, V)

    def New(self):
        return _Ensemble.Ensemble_New(self)

    def StdDev(self, *args):
        return _Ensemble.Ensemble_StdDev(self, *args)

    def Mean(self, *args):
        return _Ensemble.Ensemble_Mean(self, *args)

    def Sample(self, *args):
        return _Ensemble.Ensemble_Sample(self, *args)

    def sampleSubspace(self):
        return _Ensemble.Ensemble_sampleSubspace(self)

    def Width(self, m):
        return _Ensemble.Ensemble_Width(self, m)

    def WidthVector(self, m):
        return _Ensemble.Ensemble_WidthVector(self, m)

    def printWidth(self, *args):
        return _Ensemble.Ensemble_printWidth(self, *args)

    def StdDevMarginal(self, m, n):
        return _Ensemble.Ensemble_StdDevMarginal(self, m, n)

    def MeanMarginal(self, m, n):
        return _Ensemble.Ensemble_MeanMarginal(self, m, n)

    def SampleMarginal(self, m, n):
        return _Ensemble.Ensemble_SampleMarginal(self, m, n)

    def WidthMarginal(self, m, n):
        return _Ensemble.Ensemble_WidthMarginal(self, m, n)

    def PrintDiag(self, *args):
        return _Ensemble.Ensemble_PrintDiag(self, *args)

    def Exists(self, m):
        return _Ensemble.Ensemble_Exists(self, m)

    def Broadcast(self):
        return _Ensemble.Ensemble_Broadcast(self)

    def enableDump(self):
        return _Ensemble.Ensemble_enableDump(self)

    def disableDump(self):
        return _Ensemble.Ensemble_disableDump(self)

    def binaryDump(self):
        return _Ensemble.Ensemble_binaryDump(self)

    def asciiDump(self):
        return _Ensemble.Ensemble_asciiDump(self)

    def statesToFile(self, filename, binary):
        return _Ensemble.Ensemble_statesToFile(self, filename, binary)

    def dumpStates(self, *args):
        return _Ensemble.Ensemble_dumpStates(self, *args)

    def PrintDensity(self, *args):
        return _Ensemble.Ensemble_PrintDensity(self, *args)

    def getMaxLikeState(self):
        return _Ensemble.Ensemble_getMaxLikeState(self)

    def getMaxProbState(self):
        return _Ensemble.Ensemble_getMaxProbState(self)
Ensemble_swigregister = _Ensemble.Ensemble_swigregister
Ensemble_swigregister(Ensemble)
cvar = _Ensemble.cvar

# This file is compatible with both classic and new-style classes.


