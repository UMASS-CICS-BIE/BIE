# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GelmanRubinConverge', [dirname(__file__)])
        except ImportError:
            import _GelmanRubinConverge
            return _GelmanRubinConverge
        if fp is not None:
            try:
                _mod = imp.load_module('_GelmanRubinConverge', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _GelmanRubinConverge = swig_import_helper()
    del swig_import_helper
else:
    import _GelmanRubinConverge
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def inv_student_t_1sided(alpha, df):
    return _GelmanRubinConverge.inv_student_t_1sided(alpha, df)
inv_student_t_1sided = _GelmanRubinConverge.inv_student_t_1sided
class GelmanRubinConverge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GelmanRubinConverge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GelmanRubinConverge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ngood"] = _GelmanRubinConverge.GelmanRubinConverge_ngood_set
    __swig_getmethods__["ngood"] = _GelmanRubinConverge.GelmanRubinConverge_ngood_get
    if _newclass:
        ngood = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_ngood_get, _GelmanRubinConverge.GelmanRubinConverge_ngood_set)
    __swig_setmethods__["nskip"] = _GelmanRubinConverge.GelmanRubinConverge_nskip_set
    __swig_getmethods__["nskip"] = _GelmanRubinConverge.GelmanRubinConverge_nskip_get
    if _newclass:
        nskip = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_nskip_get, _GelmanRubinConverge.GelmanRubinConverge_nskip_set)
    __swig_setmethods__["alpha"] = _GelmanRubinConverge.GelmanRubinConverge_alpha_set
    __swig_getmethods__["alpha"] = _GelmanRubinConverge.GelmanRubinConverge_alpha_get
    if _newclass:
        alpha = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_alpha_get, _GelmanRubinConverge.GelmanRubinConverge_alpha_set)
    __swig_setmethods__["maxoutlier"] = _GelmanRubinConverge.GelmanRubinConverge_maxoutlier_set
    __swig_getmethods__["maxoutlier"] = _GelmanRubinConverge.GelmanRubinConverge_maxoutlier_get
    if _newclass:
        maxoutlier = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_maxoutlier_get, _GelmanRubinConverge.GelmanRubinConverge_maxoutlier_set)
    __swig_setmethods__["noutlier"] = _GelmanRubinConverge.GelmanRubinConverge_noutlier_set
    __swig_getmethods__["noutlier"] = _GelmanRubinConverge.GelmanRubinConverge_noutlier_get
    if _newclass:
        noutlier = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_noutlier_get, _GelmanRubinConverge.GelmanRubinConverge_noutlier_set)
    __swig_setmethods__["rtol"] = _GelmanRubinConverge.GelmanRubinConverge_rtol_set
    __swig_getmethods__["rtol"] = _GelmanRubinConverge.GelmanRubinConverge_rtol_get
    if _newclass:
        rtol = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_rtol_get, _GelmanRubinConverge.GelmanRubinConverge_rtol_set)
    __swig_setmethods__["verbose"] = _GelmanRubinConverge.GelmanRubinConverge_verbose_set
    __swig_getmethods__["verbose"] = _GelmanRubinConverge.GelmanRubinConverge_verbose_get
    if _newclass:
        verbose = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_verbose_get, _GelmanRubinConverge.GelmanRubinConverge_verbose_set)
    __swig_setmethods__["poffset"] = _GelmanRubinConverge.GelmanRubinConverge_poffset_set
    __swig_getmethods__["poffset"] = _GelmanRubinConverge.GelmanRubinConverge_poffset_get
    if _newclass:
        poffset = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_poffset_get, _GelmanRubinConverge.GelmanRubinConverge_poffset_set)
    __swig_setmethods__["debug"] = _GelmanRubinConverge.GelmanRubinConverge_debug_set
    __swig_getmethods__["debug"] = _GelmanRubinConverge.GelmanRubinConverge_debug_get
    if _newclass:
        debug = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_debug_get, _GelmanRubinConverge.GelmanRubinConverge_debug_set)
    __swig_setmethods__["maxkp"] = _GelmanRubinConverge.GelmanRubinConverge_maxkp_set
    __swig_getmethods__["maxkp"] = _GelmanRubinConverge.GelmanRubinConverge_maxkp_get
    if _newclass:
        maxkp = _swig_property(_GelmanRubinConverge.GelmanRubinConverge_maxkp_get, _GelmanRubinConverge.GelmanRubinConverge_maxkp_set)

    def __init__(self, m, d, id):
        this = _GelmanRubinConverge.new_GelmanRubinConverge(m, d, id)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Converged(self):
        return _GelmanRubinConverge.GelmanRubinConverge_Converged(self)

    def IsParallel(self):
        return _GelmanRubinConverge.GelmanRubinConverge_IsParallel(self)

    def setMax(self, n):
        return _GelmanRubinConverge.GelmanRubinConverge_setMax(self, n)

    def setNskip(self, n):
        return _GelmanRubinConverge.GelmanRubinConverge_setNskip(self, n)

    def setNoutlier(self, n):
        return _GelmanRubinConverge.GelmanRubinConverge_setNoutlier(self, n)

    def setMaxout(self, n):
        return _GelmanRubinConverge.GelmanRubinConverge_setMaxout(self, n)

    def setNgood(self, n):
        return _GelmanRubinConverge.GelmanRubinConverge_setNgood(self, n)

    def Quiet(self):
        return _GelmanRubinConverge.GelmanRubinConverge_Quiet(self)

    def setPoffset(self, z):
        return _GelmanRubinConverge.GelmanRubinConverge_setPoffset(self, z)

    def ConvergedIndex(self):
        return _GelmanRubinConverge.GelmanRubinConverge_ConvergedIndex(self)

    def setRhatMax(self, r):
        return _GelmanRubinConverge.GelmanRubinConverge_setRhatMax(self, r)

    def setAlpha(self, a):
        return _GelmanRubinConverge.GelmanRubinConverge_setAlpha(self, a)
    __swig_getmethods__["setMaxK"] = lambda x: _GelmanRubinConverge.GelmanRubinConverge_setMaxK
    if _newclass:
        setMaxK = staticmethod(_GelmanRubinConverge.GelmanRubinConverge_setMaxK)

    def AccumData(self, values, states):
        return _GelmanRubinConverge.GelmanRubinConverge_AccumData(self, values, states)

    def GetLast(self, values, states):
        return _GelmanRubinConverge.GelmanRubinConverge_GetLast(self, values, states)

    def ComputeDistribution(self):
        return _GelmanRubinConverge.GelmanRubinConverge_ComputeDistribution(self)

    def New(self, *args):
        return _GelmanRubinConverge.GelmanRubinConverge_New(self, *args)
    __swig_destroy__ = _GelmanRubinConverge.delete_GelmanRubinConverge
    __del__ = lambda self: None
GelmanRubinConverge_swigregister = _GelmanRubinConverge.GelmanRubinConverge_swigregister
GelmanRubinConverge_swigregister(GelmanRubinConverge)
cvar = _GelmanRubinConverge.cvar

def GelmanRubinConverge_setMaxK(n):
    return _GelmanRubinConverge.GelmanRubinConverge_setMaxK(n)
GelmanRubinConverge_setMaxK = _GelmanRubinConverge.GelmanRubinConverge_setMaxK

# This file is compatible with both classic and new-style classes.


