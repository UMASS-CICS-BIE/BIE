# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Histogram1D', [dirname(__file__)])
        except ImportError:
            import _Histogram1D
            return _Histogram1D
        if fp is not None:
            try:
                _mod = imp.load_module('_Histogram1D', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Histogram1D = swig_import_helper()
    del swig_import_helper
else:
    import _Histogram1D
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Bin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bin, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Histogram1D.new_Bin()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["bot"] = _Histogram1D.Bin_bot_set
    __swig_getmethods__["bot"] = _Histogram1D.Bin_bot_get
    if _newclass:
        bot = _swig_property(_Histogram1D.Bin_bot_get, _Histogram1D.Bin_bot_set)
    __swig_setmethods__["center"] = _Histogram1D.Bin_center_set
    __swig_getmethods__["center"] = _Histogram1D.Bin_center_get
    if _newclass:
        center = _swig_property(_Histogram1D.Bin_center_get, _Histogram1D.Bin_center_set)
    __swig_setmethods__["top"] = _Histogram1D.Bin_top_set
    __swig_getmethods__["top"] = _Histogram1D.Bin_top_get
    if _newclass:
        top = _swig_property(_Histogram1D.Bin_top_get, _Histogram1D.Bin_top_set)
    __swig_setmethods__["val"] = _Histogram1D.Bin_val_set
    __swig_getmethods__["val"] = _Histogram1D.Bin_val_get
    if _newclass:
        val = _swig_property(_Histogram1D.Bin_val_get, _Histogram1D.Bin_val_set)

    def __lt__(self, x):
        return _Histogram1D.Bin___lt__(self, x)
    __swig_destroy__ = _Histogram1D.delete_Bin
    __del__ = lambda self: None
Bin_swigregister = _Histogram1D.Bin_swigregister
Bin_swigregister(Bin)

class CumSampleHistogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumSampleHistogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CumSampleHistogram, name)
    __repr__ = _swig_repr

    def __init__(self, low, hi, bucketWidth=-1.0):
        this = _Histogram1D.new_CumSampleHistogram(low, hi, bucketWidth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def quartile(self, s):
        return _Histogram1D.CumSampleHistogram_quartile(self, s)

    def fraction(self, s):
        return _Histogram1D.CumSampleHistogram_fraction(self, s)
    __swig_destroy__ = _Histogram1D.delete_CumSampleHistogram
    __del__ = lambda self: None
CumSampleHistogram_swigregister = _Histogram1D.CumSampleHistogram_swigregister
CumSampleHistogram_swigregister(CumSampleHistogram)

class Histogram1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Histogram1D.new_Histogram1D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Histogram1D.delete_Histogram1D
    __del__ = lambda self: None

    def New(self):
        return _Histogram1D.Histogram1D_New(self)

    def PDF(self, x):
        return _Histogram1D.Histogram1D_PDF(self, x)

    def logPDF(self, x):
        return _Histogram1D.Histogram1D_logPDF(self, x)

    def CDF(self, x):
        return _Histogram1D.Histogram1D_CDF(self, x)

    def lower(self):
        return _Histogram1D.Histogram1D_lower(self)

    def upper(self):
        return _Histogram1D.Histogram1D_upper(self)

    def Mean(self):
        return _Histogram1D.Histogram1D_Mean(self)

    def StdDev(self):
        return _Histogram1D.Histogram1D_StdDev(self)

    def Moments(self, i):
        return _Histogram1D.Histogram1D_Moments(self, i)

    def Sample(self):
        return _Histogram1D.Histogram1D_Sample(self)

    def ComputeDistribution(self):
        return _Histogram1D.Histogram1D_ComputeDistribution(self)

    def numberData(self):
        return _Histogram1D.Histogram1D_numberData(self)

    def getValue(self, i):
        return _Histogram1D.Histogram1D_getValue(self, i)

    def getLow(self, i):
        return _Histogram1D.Histogram1D_getLow(self, i)

    def getHigh(self, i):
        return _Histogram1D.Histogram1D_getHigh(self, i)

    def getdim(self, i):
        return _Histogram1D.Histogram1D_getdim(self, i)
Histogram1D_swigregister = _Histogram1D.Histogram1D_swigregister
Histogram1D_swigregister(Histogram1D)

# This file is compatible with both classic and new-style classes.


