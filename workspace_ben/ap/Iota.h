// -*- C++ -*-

#ifndef Iota_h
#define Iota_h

#include <clivector.h>

#include "Serializable.h"


using namespace std;

namespace BIE {
  //+ CLICLASS Iota SUPER clivectori
  /** 
      Initialize an integer vector with an incrementing range of elements.

      Simple CLI helper class that returns a clivectori for use in
      contructing PriorCollections.
  */
  class Iota : public clivectori
  {
  public:

    //+ CLICONSTR int int int
    //! Constructor
    //! @param begin is the initial index
    //! @param end is one larger than (or smaller than) the final
    //! index if delta is larger (or smaller) than 0
    //! @param delta is the increment which may be >0 or <0
    //!
    Iota(int begin, int end, int delta) { build(begin, end, delta); }

    //+ CLIMETHOD void build int int int

    //! Reinitiaize the vector (using the same pointer).  Same
    //! parameters as in the constructor
    //!
    void build(int begin, int end, int delta);

  #ifndef SWIG
    // AUTO GENERATED BY ../persistence/autopersist.py
    protected:
    Iota() {}
    private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version) {
        this->pre_serialize(ar, version);
         try {                                                         
          ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(clivectori);            
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
        this->post_serialize(ar, version);
    }
    #endif

};

} // namespace BIE

#ifndef SWIG
BIE_CLASS_TYPE_INFO(BIE::Iota)
BIE_CLASS_EXPORT_KEY(BIE::Iota)
#endif
#endif
