// This is really -*- C++ -*-

#ifndef GaussTestLikelihoodFunction_h
#define GaussTestLikelihoodFunction_h

#include <LikelihoodFunction.h>
#include <gaussQ.h>

@include_persistence

namespace BIE {
  
  //+ CLICLASS GaussTestLikelihoodFunction SUPER LikelihoodFunction
  //! A "user-defined" likelihood function for testing
  //! 
  //! The "data" is the combination of two one-dimensional Gaussians,
  //! one at 0.2 with variance of 0.03 and one at 0.9 with variance of 0.03
  //! with 50% weights each.
  //! 
  //! The variance may be modeled or fixed (using the SetDim member).
  //! One may choose either point or binned data.  The default is point.
  //!
  //! @ingroup likefunc
  class @persistent(GaussTestLikelihoodFunction) : public @super(LikelihoodFunction) 
  {
    
  private:
    
    double         @ap(xmin), @ap(xmax), @ap(dx);
    vector<double> @ap(fdata), @ap(pdata);
    vector<double> @ap(centers), @ap(variance), @ap(weights);
    bool           @ap(point), @ap(cauchyData), @ap(cauchyModel);
    bool           @ap(generated);

    LegeQPtr       @autopersist(lq);
    uint32         @autopersist(number);

    int            @autopersist(dim);
    int            @autopersist(nbins);
    int            @autopersist(N);
    bool           @autopersist(ncomp);

    double         erf2(double x1, double x2);

  public:

    //! Number of knots for bin average (default: 6)
    static int nint;

    //+ CLICONSTR
    //! Null constructor
    GaussTestLikelihoodFunction();
    
    //+ CLICONSTR int int
    //! Constructor with number of bins and number of sample points
    GaussTestLikelihoodFunction(int Nbins, int N0);
    
    //+ CLICONSTR int
    //! Constructor with number of sample points for point model
    GaussTestLikelihoodFunction(int N0);
    
    //! Destructor
    virtual ~GaussTestLikelihoodFunction() {}
    
    //+ CLIMETHOD void useCauchyModel bool
    //! Set the likelihood model to a Cauchy distribution
    void useCauchyModel(bool b) { cauchyModel = b; }

    //+ CLIMETHOD void useCauchyData bool
    //! Generate the data from a Cauchy distribution
    void useCauchyData(bool b) { cauchyData = b; }

    //+ CLIMETHOD void useNcomp
    //! Use the same number of components as internal model
    void useNcomp() { ncomp = true; }

    //+ CLIMETHOD void newModel string
    //+ CLIMETHOD void newModel string bool
    //+ CLIMETHOD void newModel clivectord* clivectord* clivectord*
    //+ CLIMETHOD void newModel clivectord* clivectord* clivectord* bool
    //@{
    /** 
	Read the model from a file with name @param file.  On the
	first call, the synthetic data will be generated regardless of
	the @param keep.  On the second call, the model will be set
	and the data will only be regenerated if @param keep = false.
    */
    void newModel(string file, bool keep=false);
    /** 
	Assign the model from vectors using centers @param cen,
	variance @var, and weights @wgt.  Behavior as in the previous
	file-based algorithm.
    */
    void newModel(clivectord* cen, clivectord* var, clivectord* wgt, 
		  bool keep=false);
    //@}
    
    //+ CLIMETHOD void SetDim int
    //! Set the model dimension (currently either 1 or 2)
    void SetDim(int n);
    
    //! This is likelihood function
    double LikeProb(std::vector<double> &z, SampleDistribution* sd, 
		    double norm, Tile *t, State *s, int indx);
    
    //! The joint cumulative function
    double CumuProb(std::vector<double> &z, SampleDistribution* sd, 
		    double norm, Tile *t, State *s, int indx, Fct1dPtr f);

    //! Label output
    const std::string ParameterDescription(int i);

  protected:
    
    //@{
    //! Likelihood functions
    double LikeProbNonMixture(State *s);
    double LikeProbMixture   (State *s);
    //@}
    
    //@{
    //! The joint cumulative function
    double CumuProbNonMixture(State *s, Fct1dPtr f);
    double CumuProbMixture   (State *s, Fct1dPtr f);
    //@}


    //! Make a model with default parameters
    void defaultModel();
    
    //! Make the synthetic binned data
    void makeSyntheticData();
    
    //! Make the synthetic point data
    void makeSyntheticPointData();
    
    @persistent_end
  };

} //namespace BIE

#endif
