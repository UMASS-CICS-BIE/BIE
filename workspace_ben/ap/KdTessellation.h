// This is really -*- C++ -*-

#ifndef KdTessellation_h
#define KdTessellation_h

#include <string>
#include <algorithm>

#include "Serializable.h"


#include <Tessellation.h>
#include <RecordInputStream.h>

namespace BIE {

//+ CLICLASS KdTessellation SUPER Tessellation
/**
   Rectangular tessellation using a kd-tree.  The tessellation space is
   partioned so that each bin contains approximately the same number of 
   points.  

   @addtogroup tess Tessellation types 
*/
class KdTessellation : public Tessellation 
{

public:
  //+ CLICONSTR Tile* RecordInputStream* int double
  //! Constructor
  KdTessellation(Tile *t,RecordInputStream* ris,int pointsperbin,double samplingpct);

  //+ CLICONSTR Tile* RecordInputStream* int double double double double double
  //! Constructor with domain limits
  KdTessellation(Tile *t, RecordInputStream * ris, int pointsperbin, double samplingpct,
                 double minx, double miny, double maxx, double maxy);

  //! Destructor
  ~KdTessellation() {};
  
  //! Returns the tile id of the tree root.
  vector<int> GetRootTiles();

  //! Returns the root node.
  vector<Node*> GetRootNodes();
  
private:
  //! Percent of dataset to sample to build the tessellation
  double pcttosample;

  //! Maximum number of points per tile
  int maxptspertile;

  //! The tessellation tree
  Node* treeroot;

  //! Tile factory
  Tile* tilefactory;

  //! The sampled data points used in the creation of the tree.
  vector<twodcoords> sampledata;
  
  //! Perform tessellation of the space
  void tessellate(Node**, int, int, int, int, int, 
                  double, double, double, double);

  //! Common initialization routine used by both constructors.
  void initialize(Tile *t, RecordInputStream * ris, int pointsperbin, 
       double samplingpct,double minx, double miny, double maxx, double maxy);  

  #ifndef SWIG
    // AUTO GENERATED BY ../persistence/autopersist.py
    protected:
    KdTessellation() {}
    private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version) {
        this->pre_serialize(ar, version);
         try {                                                         
          ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(Tessellation);            
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(pcttosample);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(maxptspertile);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(treeroot);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(tilefactory);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
        this->post_serialize(ar, version);
    }
    #endif

};

} // namespace BIE
#ifndef SWIG
BIE_CLASS_TYPE_INFO(BIE::KdTessellation)
BIE_CLASS_EXPORT_KEY(BIE::KdTessellation)
#endif
#endif
