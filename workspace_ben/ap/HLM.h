// This is really -*- C++ -*-

#ifndef HLM_h
#define HLM_h

#include <vector>

#include <LikelihoodFunction.h>
#include <Serializable.h>

#include "Serializable.h"


namespace BIE {

  /** A record class for the hierarchical longitudinal model for CD4
      measurements in an AIDS study used by Han and Carlin (2001)

      The two models (M=1 and M=2) are those described in Section 4.1
      of their paper.

      @ingroup likefunc
  */
  class elemHLM: public Serializable
  {
  public:
    //@{
    //! Data fields
    unsigned drug, AIDS;
    vector<int> numb, time, indx;
    //@}
    
    //! Constructor
    elemHLM() : drug(0), AIDS(0) {}

    #ifndef SWIG
    // AUTO GENERATED BY ../persistence/autopersist.py
    private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version) {
        this->pre_serialize(ar, version);
         try {                                                         
          ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(Serializable);            
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(drug);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(AIDS);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(numb);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(time);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(indx);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
        this->post_serialize(ar, version);
    }
    #endif

  };


  //+ CLICLASS HLM SUPER LikelihoodFunction 
  /** This is the Gaussian linear mixed model Hierarchical
      longitudinal model for CD4 measurements in an AIDS study used by
      Han and Carlin (2001) 
  */
  class HLM : public LikelihoodFunction
  {
  public:
    
    //+ CLICONSTR string
    //+ CLICONSTR string int
    //! Constructor 
    HLM(string data, int M=1);

    //! This is likelihood function
    double LikeProb(std::vector<double> &z, SampleDistribution* sd, 
		    double norm, Tile *t, State *s, int indx) 
    { return LocalLikelihood(s); }

    /// Return fixed-effects dimension
    //+ CLIMETHOD int fixedDim
    int fixedDim() { return fixdim; }

    /// Return subject dimension
    //+ CLIMETHOD int subjectDim
    int subjectDim() { return subdim; }

    /// Return total dimension
    //+ CLIMETHOD int Dim
    int Dim() { 
      if (mod==1) return fixdim+subdim*3;
      if (mod==2) return fixdim+subdim*2;
      return 0;
    }

    /// Label parameters
    const std::string ParameterDescription(int i);

  private:

    /// Fixed dimension
    int fixdim;

    /// Subject specific dimension
    int subdim;

    /// The longitudal data
    vector<elemHLM> data;

    /// Time vector
    vector<int> times;

    /// Which alternative: 1=model 1, 2=model 2
    int mod;

    /// This is likelihood function
    double LocalLikelihood(State* s);

    #ifndef SWIG
    // AUTO GENERATED BY ../persistence/autopersist.py
    protected:
    HLM() {}
    private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version) {
        this->pre_serialize(ar, version);
         try {                                                         
          ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(LikelihoodFunction);            
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(fixdim);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(subdim);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(data);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(mod);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
        this->post_serialize(ar, version);
    }
    #endif

  };

} // namespace BIE
#ifndef SWIG
BIE_CLASS_TYPE_INFO(BIE::elemHLM)
BIE_CLASS_TYPE_INFO(BIE::HLM)
BIE_CLASS_EXPORT_KEY(BIE::elemHLM)
BIE_CLASS_EXPORT_KEY(BIE::HLM)
#endif
#endif
