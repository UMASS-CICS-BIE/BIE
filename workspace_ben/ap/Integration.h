// This is really -*- C++ -*-


#ifndef Integration_h
#define Integration_h

#include <Model.h>
#include <Tile.h>
#include <Distribution.h>

// for MPI
#include <mpi.h>

#include "Serializable.h"


namespace BIE {

  class LikelihoodComputation;

  //+ CLICLASS Integration
  /**
     Abstract helper class to perform two dimensional quadrature of a
     model over a cell.  Since the integration needed to compute the
     model is very likely to be rather different than the one to
     compute the model _over_ the cell, I have not attempted an
     abstraction.
  */
  class Integration: public Serializable 
  {

  public:
    
    /** Constructor: takes model, current parameter state for model
	and a cell as input
     */
    Integration() {
      Setup();
    }
    
    //! Virtual destructor to force dynamic binding
    virtual ~Integration() {};

    /** Setup any specific structures needed for quadrature (to be
	overloaded as necessary)
     */
    void Setup() {};
    
    //! Return value for model normalization
    virtual double NormValue(Model* m, Tile* t, SampleDistribution* d) = 0;

    //! Return value of model
    virtual vector<double> Value(Model* m, Tile *t, SampleDistribution* d) = 0;
    
    //! Newer MPI fine-grained method for the model normalization
    virtual  double    NormValue(LikelihoodComputation* p_likelihoodCompuation,
				 Model* p_model, Tile* p_tile,
				 SampleDistribution* p_dist)
    {cout << "This integrator has not been added into the tile-point parallelization framework yet\n";
     exit(1);
    }

    //! Newer MPI fine-grained method for the model value
    virtual vector<double> Value(LikelihoodComputation* p_likelihoodCompuation,
				 Model* p_model, Tile* p_tile,
				 SampleDistribution* p_dist)
    {cout << "This integrator has not been added into the tile-point parallelization framework yet\n";
     exit(1);
    }
    //@name MPI fine-grained methods. Deprecated */
    //@{
    //! Return value for model normalization
    virtual double NormValue(Model* m, Tile* t, SampleDistribution* d,
			     int irank, int nrank) = 0;

    //! Return value of model
    virtual vector<double> Value(Model* m, Tile *t, SampleDistribution* d, 
				 int irank, int nrank, MPI_Comm& comm) = 0;

    //@}
    
   protected:
    //! The desired value of the absolute error
    //! \todo Not yet set by all subclasses.
    vector<double> absError;    
    //! The desired value of the relative error
    vector<double> relativeError;

    #ifndef SWIG
    // AUTO GENERATED BY ../persistence/autopersist.py
    private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version) {
        this->pre_serialize(ar, version);
         try {                                                         
          ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(Serializable);            
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(absError);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
         try {                                                         
          ar & BOOST_SERIALIZATION_NVP(relativeError);                        
          BIE_CATCH_BOOST_SERIALIZATION_EXCEPTION;                     
         }                                                             
        this->post_serialize(ar, version);
    }
    #endif

  };
}

BIE_CLASS_ABSTRACT(BIE::Integration)

#ifndef SWIG
BIE_CLASS_EXPORT_KEY(BIE::Integration)
#endif
#endif
