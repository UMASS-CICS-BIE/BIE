# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SmplHist', [dirname(__file__)])
        except ImportError:
            import _SmplHist
            return _SmplHist
        if fp is not None:
            try:
                _mod = imp.load_module('_SmplHist', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SmplHist = swig_import_helper()
    del swig_import_helper
else:
    import _SmplHist
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Serializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serializable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SmplHist.new_Serializable()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _SmplHist.delete_Serializable
    __del__ = lambda self: None
Serializable_swigregister = _SmplHist.Serializable_swigregister
Serializable_swigregister(Serializable)


_SmplHist.SampleStatistic_h_swigconstant(_SmplHist)
SampleStatistic_h = _SmplHist.SampleStatistic_h
class SampleStatistic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleStatistic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleStatistic, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SmplHist.new_SampleStatistic()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _SmplHist.delete_SampleStatistic
    __del__ = lambda self: None

    def reset(self):
        return _SmplHist.SampleStatistic_reset(self)

    def __iadd__(self, arg2):
        return _SmplHist.SampleStatistic___iadd__(self, arg2)

    def samples(self):
        return _SmplHist.SampleStatistic_samples(self)

    def mean(self):
        return _SmplHist.SampleStatistic_mean(self)

    def stdDev(self):
        return _SmplHist.SampleStatistic_stdDev(self)

    def var(self):
        return _SmplHist.SampleStatistic_var(self)

    def min(self):
        return _SmplHist.SampleStatistic_min(self)

    def max(self):
        return _SmplHist.SampleStatistic_max(self)

    def confidence(self, *args):
        return _SmplHist.SampleStatistic_confidence(self, *args)

    def error(self, msg):
        return _SmplHist.SampleStatistic_error(self, msg)
SampleStatistic_swigregister = _SmplHist.SampleStatistic_swigregister
SampleStatistic_swigregister(SampleStatistic)


def default_SampleStatistic_error_handler(arg1):
    return _SmplHist.default_SampleStatistic_error_handler(arg1)
default_SampleStatistic_error_handler = _SmplHist.default_SampleStatistic_error_handler

def set_SampleStatistic_error_handler(f):
    return _SmplHist.set_SampleStatistic_error_handler(f)
set_SampleStatistic_error_handler = _SmplHist.set_SampleStatistic_error_handler

_SmplHist.SampleHistogram_h_swigconstant(_SmplHist)
SampleHistogram_h = _SmplHist.SampleHistogram_h
class SampleHistogram(SampleStatistic):
    __swig_setmethods__ = {}
    for _s in [SampleStatistic]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleHistogram, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleStatistic]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleHistogram, name)
    __repr__ = _swig_repr

    def __init__(self, low, hi, bucketWidth=-1.0):
        this = _SmplHist.new_SampleHistogram(low, hi, bucketWidth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _SmplHist.delete_SampleHistogram
    __del__ = lambda self: None

    def reset(self):
        return _SmplHist.SampleHistogram_reset(self)

    def __iadd__(self, arg2):
        return _SmplHist.SampleHistogram___iadd__(self, arg2)

    def similarSamples(self, arg2):
        return _SmplHist.SampleHistogram_similarSamples(self, arg2)

    def buckets(self):
        return _SmplHist.SampleHistogram_buckets(self)

    def bucketThreshold(self, i):
        return _SmplHist.SampleHistogram_bucketThreshold(self, i)

    def inBucket(self, i):
        return _SmplHist.SampleHistogram_inBucket(self, i)

    def printBuckets(self, arg2):
        return _SmplHist.SampleHistogram_printBuckets(self, arg2)
SampleHistogram_swigregister = _SmplHist.SampleHistogram_swigregister
SampleHistogram_swigregister(SampleHistogram)
cvar = _SmplHist.cvar
SampleHistogramMinimum = cvar.SampleHistogramMinimum
SampleHistogramMaximum = cvar.SampleHistogramMaximum

# This file is compatible with both classic and new-style classes.


