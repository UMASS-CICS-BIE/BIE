# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EvaluationRequest', [dirname(__file__)])
        except ImportError:
            import _EvaluationRequest
            return _EvaluationRequest
        if fp is not None:
            try:
                _mod = imp.load_module('_EvaluationRequest', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EvaluationRequest = swig_import_helper()
    del swig_import_helper
else:
    import _EvaluationRequest
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class EvaluationRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EvaluationRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EvaluationRequest, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _EvaluationRequest.delete_EvaluationRequest
    __del__ = lambda self: None

    def Send(self, destination, comms):
        return _EvaluationRequest.EvaluationRequest_Send(self, destination, comms)

    def Recv(self, status):
        return _EvaluationRequest.EvaluationRequest_Recv(self, status)

    def WaitForCompletion(self):
        return _EvaluationRequest.EvaluationRequest_WaitForCompletion(self)
    __swig_setmethods__["log"] = _EvaluationRequest.EvaluationRequest_log_set
    __swig_getmethods__["log"] = _EvaluationRequest.EvaluationRequest_log_get
    if _newclass:
        log = _swig_property(_EvaluationRequest.EvaluationRequest_log_get, _EvaluationRequest.EvaluationRequest_log_set)

    def LogIt(self, buf):
        return _EvaluationRequest.EvaluationRequest_LogIt(self, buf)

    def LogInt(self, buf, i):
        return _EvaluationRequest.EvaluationRequest_LogInt(self, buf, i)

    def LogDouble(self, buf, d):
        return _EvaluationRequest.EvaluationRequest_LogDouble(self, buf, d)

    def PrintLog(self):
        return _EvaluationRequest.EvaluationRequest_PrintLog(self)
    __swig_setmethods__["sendMutexWaitTime"] = _EvaluationRequest.EvaluationRequest_sendMutexWaitTime_set
    __swig_getmethods__["sendMutexWaitTime"] = _EvaluationRequest.EvaluationRequest_sendMutexWaitTime_get
    if _newclass:
        sendMutexWaitTime = _swig_property(_EvaluationRequest.EvaluationRequest_sendMutexWaitTime_get, _EvaluationRequest.EvaluationRequest_sendMutexWaitTime_set)
    __swig_setmethods__["sendCmdTime"] = _EvaluationRequest.EvaluationRequest_sendCmdTime_set
    __swig_getmethods__["sendCmdTime"] = _EvaluationRequest.EvaluationRequest_sendCmdTime_get
    if _newclass:
        sendCmdTime = _swig_property(_EvaluationRequest.EvaluationRequest_sendCmdTime_get, _EvaluationRequest.EvaluationRequest_sendCmdTime_set)
    __swig_setmethods__["sendEvalTime"] = _EvaluationRequest.EvaluationRequest_sendEvalTime_set
    __swig_getmethods__["sendEvalTime"] = _EvaluationRequest.EvaluationRequest_sendEvalTime_get
    if _newclass:
        sendEvalTime = _swig_property(_EvaluationRequest.EvaluationRequest_sendEvalTime_get, _EvaluationRequest.EvaluationRequest_sendEvalTime_set)
    __swig_setmethods__["sent"] = _EvaluationRequest.EvaluationRequest_sent_set
    __swig_getmethods__["sent"] = _EvaluationRequest.EvaluationRequest_sent_get
    if _newclass:
        sent = _swig_property(_EvaluationRequest.EvaluationRequest_sent_get, _EvaluationRequest.EvaluationRequest_sent_set)
    __swig_setmethods__["received"] = _EvaluationRequest.EvaluationRequest_received_set
    __swig_getmethods__["received"] = _EvaluationRequest.EvaluationRequest_received_get
    if _newclass:
        received = _swig_property(_EvaluationRequest.EvaluationRequest_received_get, _EvaluationRequest.EvaluationRequest_received_set)
    __swig_setmethods__["finished"] = _EvaluationRequest.EvaluationRequest_finished_set
    __swig_getmethods__["finished"] = _EvaluationRequest.EvaluationRequest_finished_get
    if _newclass:
        finished = _swig_property(_EvaluationRequest.EvaluationRequest_finished_get, _EvaluationRequest.EvaluationRequest_finished_set)
EvaluationRequest_swigregister = _EvaluationRequest.EvaluationRequest_swigregister
EvaluationRequest_swigregister(EvaluationRequest)

# This file is compatible with both classic and new-style classes.


