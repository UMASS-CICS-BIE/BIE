# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cli_server', [dirname(__file__)])
        except ImportError:
            import _cli_server
            return _cli_server
        if fp is not None:
            try:
                _mod = imp.load_module('_cli_server', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cli_server = swig_import_helper()
    del swig_import_helper
else:
    import _cli_server
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_cli_server.CLI_INPUT_swigconstant(_cli_server)
CLI_INPUT = _cli_server.CLI_INPUT

_cli_server.CLI_OUTPUT_swigconstant(_cli_server)
CLI_OUTPUT = _cli_server.CLI_OUTPUT

_cli_server.CLI_CONSOLE_swigconstant(_cli_server)
CLI_CONSOLE = _cli_server.CLI_CONSOLE

_cli_server.MY_PORT_ID_swigconstant(_cli_server)
MY_PORT_ID = _cli_server.MY_PORT_ID
class input_redirector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_redirector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_redirector, name)
    __repr__ = _swig_repr

    def Setup(self, *args):
        return _cli_server.input_redirector_Setup(self, *args)

    def run(self):
        return _cli_server.input_redirector_run(self)

    def Final(self):
        return _cli_server.input_redirector_Final(self)

    def __init__(self):
        this = _cli_server.new_input_redirector()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cli_server.delete_input_redirector
    __del__ = lambda self: None
input_redirector_swigregister = _cli_server.input_redirector_swigregister
input_redirector_swigregister(input_redirector)
cvar = _cli_server.cvar

class output_redirector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_redirector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_redirector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sock_id"] = _cli_server.output_redirector_sock_id_set
    __swig_getmethods__["sock_id"] = _cli_server.output_redirector_sock_id_get
    if _newclass:
        sock_id = _swig_property(_cli_server.output_redirector_sock_id_get, _cli_server.output_redirector_sock_id_set)
    __swig_setmethods__["pipe_name"] = _cli_server.output_redirector_pipe_name_set
    __swig_getmethods__["pipe_name"] = _cli_server.output_redirector_pipe_name_get
    if _newclass:
        pipe_name = _swig_property(_cli_server.output_redirector_pipe_name_get, _cli_server.output_redirector_pipe_name_set)
    __swig_setmethods__["pipe_id"] = _cli_server.output_redirector_pipe_id_set
    __swig_getmethods__["pipe_id"] = _cli_server.output_redirector_pipe_id_get
    if _newclass:
        pipe_id = _swig_property(_cli_server.output_redirector_pipe_id_get, _cli_server.output_redirector_pipe_id_set)
    __swig_setmethods__["char_buf"] = _cli_server.output_redirector_char_buf_set
    __swig_getmethods__["char_buf"] = _cli_server.output_redirector_char_buf_get
    if _newclass:
        char_buf = _swig_property(_cli_server.output_redirector_char_buf_get, _cli_server.output_redirector_char_buf_set)
    __swig_setmethods__["num_read"] = _cli_server.output_redirector_num_read_set
    __swig_getmethods__["num_read"] = _cli_server.output_redirector_num_read_get
    if _newclass:
        num_read = _swig_property(_cli_server.output_redirector_num_read_get, _cli_server.output_redirector_num_read_set)
    __swig_setmethods__["i"] = _cli_server.output_redirector_i_set
    __swig_getmethods__["i"] = _cli_server.output_redirector_i_get
    if _newclass:
        i = _swig_property(_cli_server.output_redirector_i_get, _cli_server.output_redirector_i_set)
    __swig_setmethods__["debug"] = _cli_server.output_redirector_debug_set
    __swig_getmethods__["debug"] = _cli_server.output_redirector_debug_get
    if _newclass:
        debug = _swig_property(_cli_server.output_redirector_debug_get, _cli_server.output_redirector_debug_set)

    def Setup(self, *args):
        return _cli_server.output_redirector_Setup(self, *args)

    def run(self):
        return _cli_server.output_redirector_run(self)

    def Final(self):
        return _cli_server.output_redirector_Final(self)

    def __init__(self):
        this = _cli_server.new_output_redirector()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cli_server.delete_output_redirector
    __del__ = lambda self: None
output_redirector_swigregister = _cli_server.output_redirector_swigregister
output_redirector_swigregister(output_redirector)

# This file is compatible with both classic and new-style classes.


